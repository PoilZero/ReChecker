14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
14284.sol
function FUN1() payable public {
uint256 VAR1 = VAR2.FUN2(VAR3, VAR4);
require(VAR1 > 1);
VAR4 = VAR2.FUN3(VAR4, VAR1);
if(!VAR5.call.value(VAR1).FUN4(400000)()) {
VAR4 = VAR2.FUN2(VAR4, VAR1);
0
---------------------------------
40366.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) {
if (!VAR4) throw;
if (msg.sender != VAR5) throw;
if (!VAR1.call.value (VAR2)(VAR3)) throw;
contract VAR6 {
bool public VAR4;
0
---------------------------------
40366.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) {
if (!VAR4) throw;
if (msg.sender != VAR5) throw;
if (!VAR1.call.value (VAR2)(VAR3)) throw;
contract VAR6 {
bool public VAR4;
0
---------------------------------
40366.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) {
if (!VAR4) throw;
if (msg.sender != VAR5) throw;
if (!VAR1.call.value (VAR2)(VAR3)) throw;
contract VAR6 {
bool public VAR4;
0
---------------------------------
40366.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) {
if (!VAR4) throw;
if (msg.sender != VAR5) throw;
if (!VAR1.call.value (VAR2)(VAR3)) throw;
contract VAR6 {
bool public VAR4;
0
---------------------------------
40366.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) {
if (!VAR4) throw;
if (msg.sender != VAR5) throw;
if (!VAR1.call.value (VAR2)(VAR3)) throw;
contract VAR6 {
bool public VAR4;
0
---------------------------------
40366.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) {
if (!VAR4) throw;
if (msg.sender != VAR5) throw;
if (!VAR1.call.value (VAR2)(VAR3)) throw;
contract VAR6 {
bool public VAR4;
0
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
2189.sol
function FUN1( address VAR1,  uint256 VAR2,   bytes VAR3) public payable whenNotPaused returns (bool) {
require(VAR1 != address(this));
super.transfer(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract GOeurekaSale is VAR4, VAR5, VAR6, VAR7 {
using SafeMath for uint256;
GOeureka public VAR8;
WhiteListedBasic public VAR9;
uint256 public VAR10;
uint256 public VAR11;
uint256 public VAR12;
address public VAR13;
uint256 public VAR14;
uint256 public VAR15;
mapping(address => uint256) public VAR16;
uint256 public VAR17 = 0;
uint public VAR18;
event FUN2(address indexed VAR19, uint256 value, uint256 VAR20);
event FUN3();event FUN4();
event FUN5(uint256 VAR21);
constructor(GOeureka VAR22, WhiteListedBasic VAR23) public {
VAR18 = 3000;
FUN6();
VAR10 = 1536508800;
VAR11 = 1543593600;
VAR13 = VAR24;
VAR8 = VAR22;
VAR9 = VAR23;
bool VAR25 = false;
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
27263.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable{
if(msg.sender != address(this))throw;
if(VAR3.call.value(VAR1)()) {
FUN2(VAR1, VAR2, VAR3, VAR4);
function FUN3(uint VAR1)  public  {
if ( VAR5[msg.sender] > 0 && VAR1 > 0)  {
this.FUN1(VAR1, "", msg.sender, VAR6);
VAR5[msg.sender] -= VAR1;
function FUN4() public {
if(msg.sender==VAR6) {
this.FUN1(this.VAR7, "", msg.sender, VAR6);
1
---------------------------------
22247.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender] && VAR4.VAR5>VAR6) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR7.FUN2(msg.sender,VAR1,"Collect");
function()
FUN3(msg.sender);
contract Logstruct Messageaddress VAR8;
string  VAR9;
uint VAR10;
uint  VAR11;
VAR12[] public VAR13;
Message VAR14;
1
---------------------------------
22247.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender] && VAR4.VAR5>VAR6) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR7.FUN2(msg.sender,VAR1,"Collect");
function()
FUN3(msg.sender);
contract Logstruct Messageaddress VAR8;
string  VAR9;
uint VAR10;
uint  VAR11;
VAR12[] public VAR13;
Message VAR14;
1
---------------------------------
22247.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender] && VAR4.VAR5>VAR6) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR7.FUN2(msg.sender,VAR1,"Collect");
function()
FUN3(msg.sender);
contract Logstruct Messageaddress VAR8;
string  VAR9;
uint VAR10;
uint  VAR11;
VAR12[] public VAR13;
Message VAR14;
1
---------------------------------
22247.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender] && VAR4.VAR5>VAR6) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR7.FUN2(msg.sender,VAR1,"Collect");
function()
FUN3(msg.sender);
contract Logstruct Messageaddress VAR8;
string  VAR9;
uint VAR10;
uint  VAR11;
VAR12[] public VAR13;
Message VAR14;
1
---------------------------------
22247.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender] && VAR4.VAR5>VAR6) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR7.FUN2(msg.sender,VAR1,"Collect");
function()
FUN3(msg.sender);
contract Logstruct Messageaddress VAR8;
string  VAR9;
uint VAR10;
uint  VAR11;
VAR12[] public VAR13;
Message VAR14;
1
---------------------------------
22247.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender] && VAR4.VAR5>VAR6) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR7.FUN2(msg.sender,VAR1,"Collect");
function()
FUN3(msg.sender);
contract Logstruct Messageaddress VAR8;
string  VAR9;
uint VAR10;
uint  VAR11;
VAR12[] public VAR13;
Message VAR14;
1
---------------------------------
22247.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender] && VAR4.VAR5>VAR6) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR7.FUN2(msg.sender,VAR1,"Collect");
function()
FUN3(msg.sender);
contract Logstruct Messageaddress VAR8;
string  VAR9;
uint VAR10;
uint  VAR11;
VAR12[] public VAR13;
Message VAR14;
1
---------------------------------
37676.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) only_owner {
if (!VAR1.call.value(VAR2)(VAR3)) throw;
FUN2(VAR1, VAR2, VAR3);
0
---------------------------------
37676.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) only_owner {
if (!VAR1.call.value(VAR2)(VAR3)) throw;
FUN2(VAR1, VAR2, VAR3);
0
---------------------------------
37676.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) only_owner {
if (!VAR1.call.value(VAR2)(VAR3)) throw;
FUN2(VAR1, VAR2, VAR3);
0
---------------------------------
37676.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) only_owner {
if (!VAR1.call.value(VAR2)(VAR3)) throw;
FUN2(VAR1, VAR2, VAR3);
0
---------------------------------
37676.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) only_owner {
if (!VAR1.call.value(VAR2)(VAR3)) throw;
FUN2(VAR1, VAR2, VAR3);
0
---------------------------------
37676.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) only_owner {
if (!VAR1.call.value(VAR2)(VAR3)) throw;
FUN2(VAR1, VAR2, VAR3);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33410.sol
function FUN1(uint VAR1)  internal notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1)  public ownerExists(msg.sender) FUN6(VAR1)  notConfirmed(VAR1, msg.sender){
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
4472.sol
function () public payable {
address(0x0581cee36a85Ed9e76109A9EfE3193de1628Ac2A).call.value(msg.value)();
0
---------------------------------
37474.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external returns (bytes32 VAR4) {
require(msg.sender==VAR5);
require(VAR1.call.value(VAR2)(VAR3));
return 0;
0
---------------------------------
37474.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external returns (bytes32 VAR4) {
require(msg.sender==VAR5);
require(VAR1.call.value(VAR2)(VAR3));
return 0;
0
---------------------------------
37474.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external returns (bytes32 VAR4) {
require(msg.sender==VAR5);
require(VAR1.call.value(VAR2)(VAR3));
return 0;
0
---------------------------------
37474.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external returns (bytes32 VAR4) {
require(msg.sender==VAR5);
require(VAR1.call.value(VAR2)(VAR3));
return 0;
0
---------------------------------
37474.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external returns (bytes32 VAR4) {
require(msg.sender==VAR5);
require(VAR1.call.value(VAR2)(VAR3));
return 0;
0
---------------------------------
37474.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external returns (bytes32 VAR4) {
require(msg.sender==VAR5);
require(VAR1.call.value(VAR2)(VAR3));
return 0;
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
33835.sol
function FUN1(bytes32 VAR1) FUN2(VAR1) returns (bool) 
if (VAR2[VAR1].VAR3 != 0) {
var VAR4= VAR2[VAR1].VAR3.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5);
FUN3(msg.sender, VAR1, VAR2[VAR1].value, VAR2[VAR1].VAR3, VAR2[VAR1].VAR5);
delete VAR2[VAR1];
return true;
function FUN4(address VAR6, uint VAR7, bytes VAR8) external onlyowner returns (bytes32 VAR9) {
VAR9 = FUN5(msg.VAR5, VAR10.VAR11);
if (!FUN1(VAR9) && VAR2[VAR9].VAR3 == 0) {
VAR2[VAR9].VAR3 = VAR6;
VAR2[VAR9].value = VAR7;
VAR2[VAR9].VAR5 = VAR8;
FUN6(VAR9, msg.sender, VAR7, VAR6, VAR8);
0
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
1044.sol
function FUN1(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN3(VAR1, VAR2, msg.sender);
function FUN4(uint256 VAR1) internal {
VAR2.call.value(VAR1)(bytes4(FUN2("")));
VAR3 += VAR1;
emit FUN5(VAR1, msg.sender);
1
---------------------------------
17573.sol
function FUN1(address VAR1, address VAR2, uint256 VAR3, bytes VAR4, string VAR5) public  returns (bool VAR6)    {
if (FUN2(VAR7)) {
if (!FUN3(VAR7).FUN4(VAR1, VAR2, VAR3))
throw;
require(super.FUN1(VAR1, VAR2, VAR3));
if (FUN2(VAR2)) {
ERC223ReceivingContract VAR8 = FUN5(VAR2);
VAR8.call.value(0)(bytes4(FUN6(VAR5)), VAR1, VAR3, VAR4);FUN7(VAR1, VAR2, VAR3, VAR4);
return true;
function transfer( address VAR2,  uint VAR3, bytes VAR4,  string VAR5)  public   returns (bool VAR6)  {
return FUN1(msg.sender, VAR2, VAR3, VAR4, VAR5);
0
---------------------------------
17573.sol
function FUN1(address VAR1, address VAR2, uint256 VAR3, bytes VAR4, string VAR5) public  returns (bool VAR6)    {
if (FUN2(VAR7)) {
if (!FUN3(VAR7).FUN4(VAR1, VAR2, VAR3))
throw;
require(super.FUN1(VAR1, VAR2, VAR3));
if (FUN2(VAR2)) {
ERC223ReceivingContract VAR8 = FUN5(VAR2);
VAR8.call.value(0)(bytes4(FUN6(VAR5)), VAR1, VAR3, VAR4);FUN7(VAR1, VAR2, VAR3, VAR4);
return true;
function transfer( address VAR2,  uint VAR3, bytes VAR4,  string VAR5)  public   returns (bool VAR6)  {
return FUN1(msg.sender, VAR2, VAR3, VAR4, VAR5);
0
---------------------------------
17573.sol
function FUN1(address VAR1, address VAR2, uint256 VAR3, bytes VAR4, string VAR5) public  returns (bool VAR6)    {
if (FUN2(VAR7)) {
if (!FUN3(VAR7).FUN4(VAR1, VAR2, VAR3))
throw;
require(super.FUN1(VAR1, VAR2, VAR3));
if (FUN2(VAR2)) {
ERC223ReceivingContract VAR8 = FUN5(VAR2);
VAR8.call.value(0)(bytes4(FUN6(VAR5)), VAR1, VAR3, VAR4);FUN7(VAR1, VAR2, VAR3, VAR4);
return true;
function transfer( address VAR2,  uint VAR3, bytes VAR4,  string VAR5)  public   returns (bool VAR6)  {
return FUN1(msg.sender, VAR2, VAR3, VAR4, VAR5);
0
---------------------------------
17573.sol
function FUN1(address VAR1, address VAR2, uint256 VAR3, bytes VAR4, string VAR5) public  returns (bool VAR6)    {
if (FUN2(VAR7)) {
if (!FUN3(VAR7).FUN4(VAR1, VAR2, VAR3))
throw;
require(super.FUN1(VAR1, VAR2, VAR3));
if (FUN2(VAR2)) {
ERC223ReceivingContract VAR8 = FUN5(VAR2);
VAR8.call.value(0)(bytes4(FUN6(VAR5)), VAR1, VAR3, VAR4);FUN7(VAR1, VAR2, VAR3, VAR4);
return true;
function transfer( address VAR2,  uint VAR3, bytes VAR4,  string VAR5)  public   returns (bool VAR6)  {
return FUN1(msg.sender, VAR2, VAR3, VAR4, VAR5);
0
---------------------------------
17573.sol
function FUN1(address VAR1, address VAR2, uint256 VAR3, bytes VAR4, string VAR5) public  returns (bool VAR6)    {
if (FUN2(VAR7)) {
if (!FUN3(VAR7).FUN4(VAR1, VAR2, VAR3))
throw;
require(super.FUN1(VAR1, VAR2, VAR3));
if (FUN2(VAR2)) {
ERC223ReceivingContract VAR8 = FUN5(VAR2);
VAR8.call.value(0)(bytes4(FUN6(VAR5)), VAR1, VAR3, VAR4);FUN7(VAR1, VAR2, VAR3, VAR4);
return true;
function transfer( address VAR2,  uint VAR3, bytes VAR4,  string VAR5)  public   returns (bool VAR6)  {
return FUN1(msg.sender, VAR2, VAR3, VAR4, VAR5);
0
---------------------------------
17573.sol
function FUN1(address VAR1, address VAR2, uint256 VAR3, bytes VAR4, string VAR5) public  returns (bool VAR6)    {
if (FUN2(VAR7)) {
if (!FUN3(VAR7).FUN4(VAR1, VAR2, VAR3))
throw;
require(super.FUN1(VAR1, VAR2, VAR3));
if (FUN2(VAR2)) {
ERC223ReceivingContract VAR8 = FUN5(VAR2);
VAR8.call.value(0)(bytes4(FUN6(VAR5)), VAR1, VAR3, VAR4);FUN7(VAR1, VAR2, VAR3, VAR4);
return true;
function transfer( address VAR2,  uint VAR3, bytes VAR4,  string VAR5)  public   returns (bool VAR6)  {
return FUN1(msg.sender, VAR2, VAR3, VAR4, VAR5);
0
---------------------------------
17215.sol
function transfer(address VAR1, uint VAR2, bytes VAR3, string VAR4) public isRunning returns (bool VAR5) {
require(VAR6);
require(FUN1(VAR1));
require(VAR7[msg.sender] >= VAR2);
VAR7[msg.sender] = VAR7[msg.sender].FUN2(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN3(VAR2);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2);
return true;
0
---------------------------------
17215.sol
function transfer(address VAR1, uint VAR2, bytes VAR3, string VAR4) public isRunning returns (bool VAR5) {
require(VAR6);
require(FUN1(VAR1));
require(VAR7[msg.sender] >= VAR2);
VAR7[msg.sender] = VAR7[msg.sender].FUN2(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN3(VAR2);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2);
return true;
0
---------------------------------
17215.sol
function transfer(address VAR1, uint VAR2, bytes VAR3, string VAR4) public isRunning returns (bool VAR5) {
require(VAR6);
require(FUN1(VAR1));
require(VAR7[msg.sender] >= VAR2);
VAR7[msg.sender] = VAR7[msg.sender].FUN2(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN3(VAR2);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2);
return true;
0
---------------------------------
16057.sol
function FUN1 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR2.call.value(msg.value)();
function FUN2 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR3.call.value(msg.value)();
function FUN3() public payable onlyOwner {
VAR4.call.value(1 VAR5)();
0
---------------------------------
16057.sol
function FUN1 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR2.call.value(msg.value)();
function FUN2 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR3.call.value(msg.value)();
function FUN3() public payable onlyOwner {
VAR4.call.value(1 VAR5)();
0
---------------------------------
16057.sol
function FUN1 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR2.call.value(msg.value)();
function FUN2 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR3.call.value(msg.value)();
function FUN3() public payable onlyOwner {
VAR4.call.value(1 VAR5)();
0
---------------------------------
16057.sol
function FUN1 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR2.call.value(msg.value)();
function FUN2 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR3.call.value(msg.value)();
function FUN3() public payable onlyOwner {
VAR4.call.value(1 VAR5)();
0
---------------------------------
16057.sol
function FUN1 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR2.call.value(msg.value)();
function FUN2 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR3.call.value(msg.value)();
function FUN3() public payable onlyOwner {
VAR4.call.value(1 VAR5)();
0
---------------------------------
16057.sol
function FUN1 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR2.call.value(msg.value)();
function FUN2 () public payable onlyPlayers {
require (msg.value >= 0.005 VAR1);
VAR3.call.value(msg.value)();
function FUN3() public payable onlyOwner {
VAR4.call.value(1 VAR5)();
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
19402.sol
function FUN1(address VAR1, uint256 value) internal {
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5) throw;
uint VAR6 = FUN2(value, FUN3());
if(FUN4(VAR7, VAR6)>VAR8) throw;
VAR9[VAR1] = FUN4(VAR9[VAR1], VAR6);VAR7 = FUN4(VAR7, VAR6);
VAR10 = FUN4(VAR10, VAR6);
Transfer(address(0), VAR1, VAR6);
if (!VAR11.call.value(value)()) throw;
FUN5(VAR1, value, VAR6);
function FUN3() constant returns(uint) {
if (VAR2.VAR3<VAR4 || VAR2.VAR3 > VAR5) return 0;
else  return VAR12;
function() public payable {
if(msg.value == 0) {
FUN6(msg.sender);
}  else {
FUN1(msg.sender, msg.value);
0
---------------------------------
3054.sol
function FUN1() public returns (bool){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {VAR2[msg.sender] = VAR1;
return false;
1
---------------------------------
3054.sol
function FUN1() public returns (bool){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {VAR2[msg.sender] = VAR1;
return false;
1
---------------------------------
3054.sol
function FUN1() public returns (bool){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {VAR2[msg.sender] = VAR1;
return false;
1
---------------------------------
3054.sol
function FUN1() public returns (bool){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {VAR2[msg.sender] = VAR1;
return false;
1
---------------------------------
3054.sol
function FUN1() public returns (bool){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {VAR2[msg.sender] = VAR1;
return false;
1
---------------------------------
3054.sol
function FUN1() public returns (bool){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {VAR2[msg.sender] = VAR1;
return false;
1
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
29517.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public {
require(msg.sender == VAR3);
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
30046.sol
function FUN1() public FUN2()  FUN3() {
Transaction storage VAR1 = VAR2[VAR2.VAR3 - 1];
require(VAR4 > VAR1.VAR5 + VAR6[VAR1.VAR7].VAR8);
VAR1.VAR9 = true;
VAR1.VAR10 = VAR4;
VAR1.VAR11 = msg.sender;
VAR1.VAR12 = VAR1.VAR13.call.value(
VAR1.value)(VAR1.VAR14);
1
---------------------------------
30046.sol
function FUN1() public FUN2()  FUN3() {
Transaction storage VAR1 = VAR2[VAR2.VAR3 - 1];
require(VAR4 > VAR1.VAR5 + VAR6[VAR1.VAR7].VAR8);
VAR1.VAR9 = true;
VAR1.VAR10 = VAR4;
VAR1.VAR11 = msg.sender;
VAR1.VAR12 = VAR1.VAR13.call.value(
VAR1.value)(VAR1.VAR14);
1
---------------------------------
30046.sol
function FUN1() public FUN2()  FUN3() {
Transaction storage VAR1 = VAR2[VAR2.VAR3 - 1];
require(VAR4 > VAR1.VAR5 + VAR6[VAR1.VAR7].VAR8);
VAR1.VAR9 = true;
VAR1.VAR10 = VAR4;
VAR1.VAR11 = msg.sender;
VAR1.VAR12 = VAR1.VAR13.call.value(
VAR1.value)(VAR1.VAR14);
1
---------------------------------
EtherStore.sol
function FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
function FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
function FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
2013.sol
FUN1(address VAR1, uint value, bytes VAR2) public onlyOwner{
if (VAR1.call.value(value)(VAR2))emit FUN2(VAR1,value,VAR2);
VAR3 FUN3(VAR1,value,VAR2);
library VAR4 {
0
---------------------------------
2013.sol
FUN1(address VAR1, uint value, bytes VAR2) public onlyOwner{
if (VAR1.call.value(value)(VAR2))emit FUN2(VAR1,value,VAR2);
VAR3 FUN3(VAR1,value,VAR2);
library VAR4 {
0
---------------------------------
2013.sol
FUN1(address VAR1, uint value, bytes VAR2) public onlyOwner{
if (VAR1.call.value(value)(VAR2))emit FUN2(VAR1,value,VAR2);
VAR3 FUN3(VAR1,value,VAR2);
library VAR4 {
0
---------------------------------
2013.sol
FUN1(address VAR1, uint value, bytes VAR2) public onlyOwner{
if (VAR1.call.value(value)(VAR2))emit FUN2(VAR1,value,VAR2);
VAR3 FUN3(VAR1,value,VAR2);
library VAR4 {
0
---------------------------------
2013.sol
FUN1(address VAR1, uint value, bytes VAR2) public onlyOwner{
if (VAR1.call.value(value)(VAR2))emit FUN2(VAR1,value,VAR2);
VAR3 FUN3(VAR1,value,VAR2);
library VAR4 {
0
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
11705.sol
FUN1(address VAR1, uint value) internal 
{require (VAR2[VAR1][msg.sender] >= value);
VAR2[VAR1][msg.sender] -= value;
VAR3[VAR1] -= value;require((VAR1 != 0)?
FUN2(VAR1).transfer(msg.sender, value):
msg.sender.call.value(value)()
);
emit FUN3
(VAR1,
msg.sender,
value,
VAR2[VAR1][msg.sender]);
FUN4(uint VAR4) public {F
UN1(0, VAR4);
FUN5(address VAR1, uint VAR4) public {
FUN1(VAR1, VAR4);
0
---------------------------------
11705.sol
FUN1(address VAR1, uint value) internal 
{require (VAR2[VAR1][msg.sender] >= value);
VAR2[VAR1][msg.sender] -= value;
VAR3[VAR1] -= value;require((VAR1 != 0)?
FUN2(VAR1).transfer(msg.sender, value):
msg.sender.call.value(value)()
);
emit FUN3
(VAR1,
msg.sender,
value,
VAR2[VAR1][msg.sender]);
FUN4(uint VAR4) public {F
UN1(0, VAR4);
FUN5(address VAR1, uint VAR4) public {
FUN1(VAR1, VAR4);
0
---------------------------------
11705.sol
FUN1(address VAR1, uint value) internal 
{require (VAR2[VAR1][msg.sender] >= value);
VAR2[VAR1][msg.sender] -= value;
VAR3[VAR1] -= value;require((VAR1 != 0)?
FUN2(VAR1).transfer(msg.sender, value):
msg.sender.call.value(value)()
);
emit FUN3
(VAR1,
msg.sender,
value,
VAR2[VAR1][msg.sender]);
FUN4(uint VAR4) public {F
UN1(0, VAR4);
FUN5(address VAR1, uint VAR4) public {
FUN1(VAR1, VAR4);
0
---------------------------------
13076.sol
FUN1(address VAR1, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;function FUN3(address VAR4, uint256 VAR2, bytes VAR3) public payable returns (bool) {require(VAR4 != address(this));
super.transfer(VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN4(    address VAR5,    address VAR4,    uint256 VAR2,    bytes VAR3  )    public payable returns (bool)  {
require(VAR4 != address(this));
super.FUN5(VAR5, VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN6(address VAR1, uint VAR6, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN7(VAR1, VAR6);require(VAR1.call.value(msg.value)(VAR3));
return true;
function FUN8(address VAR1, uint VAR7, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN9(VAR1, VAR7);
require(VAR1.call.value(msg.value)(VAR3));
return true;contract TimedCrowdsale is VAR8 {using SafeMath for uint256;uint256 public VAR9;uint256 public VAR10;
modifier VAR11 {require(VAR12.VAR13 >= VAR9 && VAR12.VAR13 <= VAR10);VAR14;
1
---------------------------------
13076.sol
FUN1(address VAR1, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;function FUN3(address VAR4, uint256 VAR2, bytes VAR3) public payable returns (bool) {require(VAR4 != address(this));
super.transfer(VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN4(    address VAR5,    address VAR4,    uint256 VAR2,    bytes VAR3  )    public payable returns (bool)  {
require(VAR4 != address(this));
super.FUN5(VAR5, VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN6(address VAR1, uint VAR6, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN7(VAR1, VAR6);require(VAR1.call.value(msg.value)(VAR3));
return true;
function FUN8(address VAR1, uint VAR7, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN9(VAR1, VAR7);
require(VAR1.call.value(msg.value)(VAR3));
return true;contract TimedCrowdsale is VAR8 {using SafeMath for uint256;uint256 public VAR9;uint256 public VAR10;
modifier VAR11 {require(VAR12.VAR13 >= VAR9 && VAR12.VAR13 <= VAR10);VAR14;
1
---------------------------------
13076.sol
FUN1(address VAR1, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;function FUN3(address VAR4, uint256 VAR2, bytes VAR3) public payable returns (bool) {require(VAR4 != address(this));
super.transfer(VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN4(    address VAR5,    address VAR4,    uint256 VAR2,    bytes VAR3  )    public payable returns (bool)  {
require(VAR4 != address(this));
super.FUN5(VAR5, VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN6(address VAR1, uint VAR6, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN7(VAR1, VAR6);require(VAR1.call.value(msg.value)(VAR3));
return true;
function FUN8(address VAR1, uint VAR7, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN9(VAR1, VAR7);
require(VAR1.call.value(msg.value)(VAR3));
return true;contract TimedCrowdsale is VAR8 {using SafeMath for uint256;uint256 public VAR9;uint256 public VAR10;
modifier VAR11 {require(VAR12.VAR13 >= VAR9 && VAR12.VAR13 <= VAR10);VAR14;
1
---------------------------------
22902.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns (bool VAR5) {
if (FUN2(VAR1)) {
require(VAR6[VAR1]);
if (FUN3(msg.sender) < VAR2) revert();
VAR7[msg.sender] = VAR7[msg.sender].FUN4(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN5(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3));
FUN7(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
22902.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns (bool VAR5) {
if (FUN2(VAR1)) {
require(VAR6[VAR1]);
if (FUN3(msg.sender) < VAR2) revert();
VAR7[msg.sender] = VAR7[msg.sender].FUN4(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN5(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3));
FUN7(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
22902.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns (bool VAR5) {
if (FUN2(VAR1)) {
require(VAR6[VAR1]);
if (FUN3(msg.sender) < VAR2) revert();
VAR7[msg.sender] = VAR7[msg.sender].FUN4(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN5(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3));
FUN7(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
22902.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns (bool VAR5) {
if (FUN2(VAR1)) {
require(VAR6[VAR1]);
if (FUN3(msg.sender) < VAR2) revert();
VAR7[msg.sender] = VAR7[msg.sender].FUN4(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN5(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3));
FUN7(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
22902.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns (bool VAR5) {
if (FUN2(VAR1)) {
require(VAR6[VAR1]);
if (FUN3(msg.sender) < VAR2) revert();
VAR7[msg.sender] = VAR7[msg.sender].FUN4(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN5(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3));
FUN7(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
22902.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns (bool VAR5) {
if (FUN2(VAR1)) {
require(VAR6[VAR1]);
if (FUN3(msg.sender) < VAR2) revert();
VAR7[msg.sender] = VAR7[msg.sender].FUN4(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN5(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3));
FUN7(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
30337.sol
FUN1()  external   returns (bool VAR1) {
uint256 VAR2 = VAR3[msg.sender];VAR3[msg.sender] = 0;
VAR4 -= VAR2;
if (!msg.sender.call.value(VAR2)()) {
throw;VAR1 = true;
0
---------------------------------
30337.sol
FUN1()  external   returns (bool VAR1) {
uint256 VAR2 = VAR3[msg.sender];VAR3[msg.sender] = 0;
VAR4 -= VAR2;
if (!msg.sender.call.value(VAR2)()) {
throw;VAR1 = true;
0
---------------------------------
30337.sol
FUN1()  external   returns (bool VAR1) {
uint256 VAR2 = VAR3[msg.sender];VAR3[msg.sender] = 0;
VAR4 -= VAR2;
if (!msg.sender.call.value(VAR2)()) {
throw;VAR1 = true;
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35661.sol
FUN1() VAR1 {if(FUN2() != VAR2.VAR3) throw;
address VAR4 = msg.sender;
if(VAR5[VAR4] == 0) throw;
uint VAR6 = VAR5[VAR4];
delete VAR5[VAR4];
if(!(VAR4.call.value(VAR6)())) throw;
FUN3(VAR4, VAR6);
0
---------------------------------
35661.sol
FUN1() VAR1 {if(FUN2() != VAR2.VAR3) throw;
address VAR4 = msg.sender;
if(VAR5[VAR4] == 0) throw;
uint VAR6 = VAR5[VAR4];
delete VAR5[VAR4];
if(!(VAR4.call.value(VAR6)())) throw;
FUN3(VAR4, VAR6);
0
---------------------------------
35661.sol
FUN1() VAR1 {if(FUN2() != VAR2.VAR3) throw;
address VAR4 = msg.sender;
if(VAR5[VAR4] == 0) throw;
uint VAR6 = VAR5[VAR4];
delete VAR5[VAR4];
if(!(VAR4.call.value(VAR6)())) throw;
FUN3(VAR4, VAR6);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
37329.sol
FUN1() VAR1 {
if (FUN2() < VAR2) return;
if (this.VAR3 == 0) return;
uint256 VAR4 = VAR5.FUN3(this.VAR3, VAR6);
assert(VAR7.call.value(VAR4)());
FUN4(VAR4);
0
---------------------------------
37329.sol
FUN1() VAR1 {
if (FUN2() < VAR2) return;
if (this.VAR3 == 0) return;
uint256 VAR4 = VAR5.FUN3(this.VAR3, VAR6);
assert(VAR7.call.value(VAR4)());
FUN4(VAR4);
0
---------------------------------
37329.sol
FUN1() VAR1 {
if (FUN2() < VAR2) return;
if (this.VAR3 == 0) return;
uint256 VAR4 = VAR5.FUN3(this.VAR3, VAR6);
assert(VAR7.call.value(VAR4)());
FUN4(VAR4);
0
---------------------------------
37329.sol
FUN1() VAR1 {
if (FUN2() < VAR2) return;
if (this.VAR3 == 0) return;
uint256 VAR4 = VAR5.FUN3(this.VAR3, VAR6);
assert(VAR7.call.value(VAR4)());
FUN4(VAR4);
0
---------------------------------
37329.sol
FUN1() VAR1 {
if (FUN2() < VAR2) return;
if (this.VAR3 == 0) return;
uint256 VAR4 = VAR5.FUN3(this.VAR3, VAR6);
assert(VAR7.call.value(VAR4)());
FUN4(VAR4);
0
---------------------------------
37329.sol
FUN1() VAR1 {
if (FUN2() < VAR2) return;
if (this.VAR3 == 0) return;
uint256 VAR4 = VAR5.FUN3(this.VAR3, VAR6);
assert(VAR7.call.value(VAR4)());
FUN4(VAR4);
0
---------------------------------
37891.sol
FUN1() {uint VAR1 = VAR2[msg.sender];
require(VAR1 > 0);
VAR2[msg.sender] = 0;
bool VAR3 = msg.sender.call.value(VAR1)();
require(VAR3);
0
---------------------------------
37891.sol
FUN1() {uint VAR1 = VAR2[msg.sender];
require(VAR1 > 0);
VAR2[msg.sender] = 0;
bool VAR3 = msg.sender.call.value(VAR1)();
require(VAR3);
0
---------------------------------
37891.sol
FUN1() {uint VAR1 = VAR2[msg.sender];
require(VAR1 > 0);
VAR2[msg.sender] = 0;
bool VAR3 = msg.sender.call.value(VAR1)();
require(VAR3);
0
---------------------------------
39890.sol
FUN1(uint VAR1) internal {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if (VAR4.VAR5 == VAR6.VAR7) throw;
VAR4.VAR5 = VAR6.VAR7;
if(!VAR4.VAR8.call.value(0)(VAR4.VAR9)) throw;
FUN2(VAR1, VAR4.VAR5);
function FUN3(uint VAR1) campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR11) ||(VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
function FUN4(uint VAR1) campaignNotCanceled VAR10 {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR13)&&(msg.sender != VAR14))  throw;
if ((VAR4.VAR5 != VAR6.VAR12) || (VAR15 < VAR4.VAR16 + VAR4.VAR17)) throw;
FUN1(VAR1);
function FUN5(uint VAR1) onlyArbitrator campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((VAR4.VAR5 != VAR6.VAR18) && (VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
0
---------------------------------
39890.sol
FUN1(uint VAR1) internal {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if (VAR4.VAR5 == VAR6.VAR7) throw;
VAR4.VAR5 = VAR6.VAR7;
if(!VAR4.VAR8.call.value(0)(VAR4.VAR9)) throw;
FUN2(VAR1, VAR4.VAR5);
function FUN3(uint VAR1) campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR11) ||(VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
function FUN4(uint VAR1) campaignNotCanceled VAR10 {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR13)&&(msg.sender != VAR14))  throw;
if ((VAR4.VAR5 != VAR6.VAR12) || (VAR15 < VAR4.VAR16 + VAR4.VAR17)) throw;
FUN1(VAR1);
function FUN5(uint VAR1) onlyArbitrator campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((VAR4.VAR5 != VAR6.VAR18) && (VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
0
---------------------------------
39890.sol
FUN1(uint VAR1) internal {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if (VAR4.VAR5 == VAR6.VAR7) throw;
VAR4.VAR5 = VAR6.VAR7;
if(!VAR4.VAR8.call.value(0)(VAR4.VAR9)) throw;
FUN2(VAR1, VAR4.VAR5);
function FUN3(uint VAR1) campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR11) ||(VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
function FUN4(uint VAR1) campaignNotCanceled VAR10 {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR13)&&(msg.sender != VAR14))  throw;
if ((VAR4.VAR5 != VAR6.VAR12) || (VAR15 < VAR4.VAR16 + VAR4.VAR17)) throw;
FUN1(VAR1);
function FUN5(uint VAR1) onlyArbitrator campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((VAR4.VAR5 != VAR6.VAR18) && (VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
0
---------------------------------
39890.sol
FUN1(uint VAR1) internal {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if (VAR4.VAR5 == VAR6.VAR7) throw;
VAR4.VAR5 = VAR6.VAR7;
if(!VAR4.VAR8.call.value(0)(VAR4.VAR9)) throw;
FUN2(VAR1, VAR4.VAR5);
function FUN3(uint VAR1) campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR11) ||(VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
function FUN4(uint VAR1) campaignNotCanceled VAR10 {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR13)&&(msg.sender != VAR14))  throw;
if ((VAR4.VAR5 != VAR6.VAR12) || (VAR15 < VAR4.VAR16 + VAR4.VAR17)) throw;
FUN1(VAR1);
function FUN5(uint VAR1) onlyArbitrator campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((VAR4.VAR5 != VAR6.VAR18) && (VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
0
---------------------------------
39890.sol
FUN1(uint VAR1) internal {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if (VAR4.VAR5 == VAR6.VAR7) throw;
VAR4.VAR5 = VAR6.VAR7;
if(!VAR4.VAR8.call.value(0)(VAR4.VAR9)) throw;
FUN2(VAR1, VAR4.VAR5);
function FUN3(uint VAR1) campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR11) ||(VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
function FUN4(uint VAR1) campaignNotCanceled VAR10 {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR13)&&(msg.sender != VAR14))  throw;
if ((VAR4.VAR5 != VAR6.VAR12) || (VAR15 < VAR4.VAR16 + VAR4.VAR17)) throw;
FUN1(VAR1);
function FUN5(uint VAR1) onlyArbitrator campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((VAR4.VAR5 != VAR6.VAR18) && (VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
0
---------------------------------
39932.sol
FUN1(bytes32 VAR1) payable returns (bool) {
if (msg.value < 100) throw;
var VAR2 = msg.value * VAR3 / 100;var VAR4 = bytes4(FUN2(""));
if ( !VAR5.call.value(VAR2)(VAR4, VAR6)|| !VAR5.call.value(msg.value - VAR2)(VAR4, VAR1)) throw;
return true;contract Invoice is VAR7 {address   public VAR8;
uint      public VAR9;
Comission public VAR10;
string    public VAR11;
bytes32   public VAR12;
uint      public value;
0
---------------------------------
39932.sol
FUN1(bytes32 VAR1) payable returns (bool) {
if (msg.value < 100) throw;
var VAR2 = msg.value * VAR3 / 100;var VAR4 = bytes4(FUN2(""));
if ( !VAR5.call.value(VAR2)(VAR4, VAR6)|| !VAR5.call.value(msg.value - VAR2)(VAR4, VAR1)) throw;
return true;contract Invoice is VAR7 {address   public VAR8;
uint      public VAR9;
Comission public VAR10;
string    public VAR11;
bytes32   public VAR12;
uint      public value;
0
---------------------------------
39932.sol
FUN1(bytes32 VAR1) payable returns (bool) {
if (msg.value < 100) throw;
var VAR2 = msg.value * VAR3 / 100;var VAR4 = bytes4(FUN2(""));
if ( !VAR5.call.value(VAR2)(VAR4, VAR6)|| !VAR5.call.value(msg.value - VAR2)(VAR4, VAR1)) throw;
return true;contract Invoice is VAR7 {address   public VAR8;
uint      public VAR9;
Comission public VAR10;
string    public VAR11;
bytes32   public VAR12;
uint      public value;
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
35637.sol
function transfer(address VAR1, uint48 VAR2, bytes VAR3, string VAR4) returns (bool VAR5) {
if(FUN1(VAR1)) {
require(FUN2(msg.sender) >= VAR2);
VAR6[msg.sender] = FUN3(FUN2(msg.sender), VAR2);
VAR6[VAR1] = FUN4(FUN2(VAR1), VAR2);
ContractReceiver VAR7 = FUN5(VAR1);
VAR7.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN7(VAR1, VAR2, VAR3);
0
---------------------------------
35637.sol
function transfer(address VAR1, uint48 VAR2, bytes VAR3, string VAR4) returns (bool VAR5) {
if(FUN1(VAR1)) {
require(FUN2(msg.sender) >= VAR2);
VAR6[msg.sender] = FUN3(FUN2(msg.sender), VAR2);
VAR6[VAR1] = FUN4(FUN2(VAR1), VAR2);
ContractReceiver VAR7 = FUN5(VAR1);
VAR7.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN7(VAR1, VAR2, VAR3);
0
---------------------------------
35637.sol
function transfer(address VAR1, uint48 VAR2, bytes VAR3, string VAR4) returns (bool VAR5) {
if(FUN1(VAR1)) {
require(FUN2(msg.sender) >= VAR2);
VAR6[msg.sender] = FUN3(FUN2(msg.sender), VAR2);
VAR6[VAR1] = FUN4(FUN2(VAR1), VAR2);
ContractReceiver VAR7 = FUN5(VAR1);
VAR7.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN7(VAR1, VAR2, VAR3);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
28869.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1)  {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public  ownerExists(msg.sender)  FUN6(VAR1) notConfirmed(VAR1, msg.sender)  {
VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
18438.sol
function FUN1() public {
uint256 VAR1 = address(this).VAR2;
if(VAR1 > 1){
uint256 VAR3 = VAR1 / 2;
require(VAR4.call.value(VAR3)());
VAR5.VAR6.value(VAR3)(msg.sender);
function FUN2() payable public {
require(VAR4.call.value(msg.value).FUN3(1000000)());
0
---------------------------------
14758.sol
function FUN1(address VAR1, uint256 VAR2) payable {
require(msg.sender == VAR3);
uint VAR4 = this.VAR5;
VAR1.call.value(msg.value)(bytes4(FUN2("")), VAR2);
if (this.VAR5 <= VAR4) revert();
VAR3.transfer(this.VAR5);
0
---------------------------------
14758.sol
function FUN1(address VAR1, uint256 VAR2) payable {
require(msg.sender == VAR3);
uint VAR4 = this.VAR5;
VAR1.call.value(msg.value)(bytes4(FUN2("")), VAR2);
if (this.VAR5 <= VAR4) revert();
VAR3.transfer(this.VAR5);
0
---------------------------------
14758.sol
function FUN1(address VAR1, uint256 VAR2) payable {
require(msg.sender == VAR3);
uint VAR4 = this.VAR5;
VAR1.call.value(msg.value)(bytes4(FUN2("")), VAR2);
if (this.VAR5 <= VAR4) revert();
VAR3.transfer(this.VAR5);
0
---------------------------------
14758.sol
function FUN1(address VAR1, uint256 VAR2) payable {
require(msg.sender == VAR3);
uint VAR4 = this.VAR5;
VAR1.call.value(msg.value)(bytes4(FUN2("")), VAR2);
if (this.VAR5 <= VAR4) revert();
VAR3.transfer(this.VAR5);
0
---------------------------------
14758.sol
function FUN1(address VAR1, uint256 VAR2) payable {
require(msg.sender == VAR3);
uint VAR4 = this.VAR5;
VAR1.call.value(msg.value)(bytes4(FUN2("")), VAR2);
if (this.VAR5 <= VAR4) revert();
VAR3.transfer(this.VAR5);
0
---------------------------------
14994.sol
function FUN1() public returns (uint VAR1) {
FUN2(msg.sender);
VAR1 = VAR2[msg.sender] / VAR3;
VAR2[msg.sender] = 0;
VAR4 += VAR1;
emit FUN3(VAR5, msg.sender, VAR1);
require(msg.sender.call.value(VAR1)());
0
---------------------------------
14994.sol
function FUN1() public returns (uint VAR1) {
FUN2(msg.sender);
VAR1 = VAR2[msg.sender] / VAR3;
VAR2[msg.sender] = 0;
VAR4 += VAR1;
emit FUN3(VAR5, msg.sender, VAR1);
require(msg.sender.call.value(VAR1)());
0
---------------------------------
14994.sol
function FUN1() public returns (uint VAR1) {
FUN2(msg.sender);
VAR1 = VAR2[msg.sender] / VAR3;
VAR2[msg.sender] = 0;
VAR4 += VAR1;
emit FUN3(VAR5, msg.sender, VAR1);
require(msg.sender.call.value(VAR1)());
0
---------------------------------
14994.sol
function FUN1() public returns (uint VAR1) {
FUN2(msg.sender);
VAR1 = VAR2[msg.sender] / VAR3;
VAR2[msg.sender] = 0;
VAR4 += VAR1;
emit FUN3(VAR5, msg.sender, VAR1);
require(msg.sender.call.value(VAR1)());
0
---------------------------------
14994.sol
function FUN1() public returns (uint VAR1) {
FUN2(msg.sender);
VAR1 = VAR2[msg.sender] / VAR3;
VAR2[msg.sender] = 0;
VAR4 += VAR1;
emit FUN3(VAR5, msg.sender, VAR1);
require(msg.sender.call.value(VAR1)());
0
---------------------------------
14994.sol
function FUN1() public returns (uint VAR1) {
FUN2(msg.sender);
VAR1 = VAR2[msg.sender] / VAR3;
VAR2[msg.sender] = 0;
VAR4 += VAR1;
emit FUN3(VAR5, msg.sender, VAR1);
require(msg.sender.call.value(VAR1)());
0
---------------------------------
35806.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
require(msg.sender.call.value(VAR1)());
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
35806.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
require(msg.sender.call.value(VAR1)());
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
35806.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
require(msg.sender.call.value(VAR1)());
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40241.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
21697.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
10107.sol
function transfer(address VAR1, uint value, bytes VAR2, string VAR3) public returns (bool) {
if(FUN1(msg.sender) < value) revert();
VAR4[msg.sender] = VAR4[msg.sender].FUN2(value);
VAR4[VAR1] = VAR4[VAR1].FUN3(value);
if (FUN4(VAR1)) {
assert(VAR1.call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2));
emit Transfer(msg.sender, VAR1, value, VAR2);
return true;
0
---------------------------------
39191.sol
function FUN1(Bank storage VAR1, address VAR2, uint value) public returns (bool) {
if (VAR1.VAR3[VAR2] >= value) {
FUN2(VAR1, VAR2, value);
if (!VAR2.FUN3(value)) {
if (!VAR2.call.value(value)()) {  throw; }
return true;
return false;
uint constant VAR4 = 100000;
0
---------------------------------
39191.sol
function FUN1(Bank storage VAR1, address VAR2, uint value) public returns (bool) {
if (VAR1.VAR3[VAR2] >= value) {
FUN2(VAR1, VAR2, value);
if (!VAR2.FUN3(value)) {
if (!VAR2.call.value(value)()) {  throw; }
return true;
return false;
uint constant VAR4 = 100000;
0
---------------------------------
39191.sol
function FUN1(Bank storage VAR1, address VAR2, uint value) public returns (bool) {
if (VAR1.VAR3[VAR2] >= value) {
FUN2(VAR1, VAR2, value);
if (!VAR2.FUN3(value)) {
if (!VAR2.call.value(value)()) {  throw; }
return true;
return false;
uint constant VAR4 = 100000;
0
---------------------------------
39191.sol
function FUN1(Bank storage VAR1, address VAR2, uint value) public returns (bool) {
if (VAR1.VAR3[VAR2] >= value) {
FUN2(VAR1, VAR2, value);
if (!VAR2.FUN3(value)) {
if (!VAR2.call.value(value)()) {  throw; }
return true;
return false;
uint constant VAR4 = 100000;
0
---------------------------------
39191.sol
function FUN1(Bank storage VAR1, address VAR2, uint value) public returns (bool) {
if (VAR1.VAR3[VAR2] >= value) {
FUN2(VAR1, VAR2, value);
if (!VAR2.FUN3(value)) {
if (!VAR2.call.value(value)()) {  throw; }
return true;
return false;
uint constant VAR4 = 100000;
0
---------------------------------
39191.sol
function FUN1(Bank storage VAR1, address VAR2, uint value) public returns (bool) {
if (VAR1.VAR3[VAR2] >= value) {
FUN2(VAR1, VAR2, value);
if (!VAR2.FUN3(value)) {
if (!VAR2.call.value(value)()) {  throw; }
return true;
return false;
uint constant VAR4 = 100000;
0
---------------------------------
39191.sol
function FUN1(Bank storage VAR1, address VAR2, uint value) public returns (bool) {
if (VAR1.VAR3[VAR2] >= value) {
FUN2(VAR1, VAR2, value);
if (!VAR2.FUN3(value)) {
if (!VAR2.call.value(value)()) {  throw; }
return true;
return false;
uint constant VAR4 = 100000;
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
5515.sol
function FUN1(uint VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
if (VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5)) {
emit FUN3(VAR1);
} else {
emit FUN4(VAR1);
VAR2[VAR1].VAR3 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {
VAR6[VAR1][msg.sender] = true;
emit FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
17009.sol
function FUN1(address VAR1) public payable {
require(VAR1 != 0x0);
require(msg.value > 0);
require(!VAR2);
VAR3.transfer(msg.value.FUN2(9));
VAR1.call.value(msg.value.FUN2(9).FUN3(8))();
FUN4(VAR1, msg.value);
1
---------------------------------
17009.sol
function FUN1(address VAR1) public payable {
require(VAR1 != 0x0);
require(msg.value > 0);
require(!VAR2);
VAR3.transfer(msg.value.FUN2(9));
VAR1.call.value(msg.value.FUN2(9).FUN3(8))();
FUN4(VAR1, msg.value);
1
---------------------------------
17009.sol
function FUN1(address VAR1) public payable {
require(VAR1 != 0x0);
require(msg.value > 0);
require(!VAR2);
VAR3.transfer(msg.value.FUN2(9));
VAR1.call.value(msg.value.FUN2(9).FUN3(8))();
FUN4(VAR1, msg.value);
1
---------------------------------
17009.sol
function FUN1(address VAR1) public payable {
require(VAR1 != 0x0);
require(msg.value > 0);
require(!VAR2);
VAR3.transfer(msg.value.FUN2(9));
VAR1.call.value(msg.value.FUN2(9).FUN3(8))();
FUN4(VAR1, msg.value);
1
---------------------------------
17009.sol
function FUN1(address VAR1) public payable {
require(VAR1 != 0x0);
require(msg.value > 0);
require(!VAR2);
VAR3.transfer(msg.value.FUN2(9));
VAR1.call.value(msg.value.FUN2(9).FUN3(8))();
FUN4(VAR1, msg.value);
1
---------------------------------
17009.sol
function FUN1(address VAR1) public payable {
require(VAR1 != 0x0);
require(msg.value > 0);
require(!VAR2);
VAR3.transfer(msg.value.FUN2(9));
VAR1.call.value(msg.value.FUN2(9).FUN3(8))();
FUN4(VAR1, msg.value);
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
23421.sol
function FUN1(address VAR1, uint VAR2) internal {
require(VAR1 != 0);
require(VAR1.call.value(VAR2)());
function FUN2(address[] VAR3, uint[] VAR2) payable public returns(bool) {
for (uint VAR4 = 0; VAR4 < VAR3.VAR5; VAR4++) {
FUN1(VAR3[VAR4], VAR2[VAR4]);
return true;
1
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27486.sol
function FUN1(address VAR1,bytes VAR2)  payable  public  {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
40353.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40353.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
40353.sol
function FUN1(uint256 VAR1) noEther onlyDaoChallenge {
if (VAR1 == 0 || VAR2 == 0 || VAR2 < VAR1) throw;
VAR2 -= VAR1;
if(!VAR3.call.value(VAR1 * VAR4)()) throw;
function FUN1(uint256 VAR1) noEther {
DaoAccount VAR5 = FUN2(msg.sender, false);
if (VAR5 == FUN3(0x00)) throw;
VAR5.FUN1(VAR1);
FUN4(msg.sender, VAR1);
0
---------------------------------
39684.sol
function () payable {
if (msg.VAR1.VAR2 > 0) {
FUN1(msg.VAR1, 0, "", "", 0x0);
} else if (VAR3[msg.sender] != 0) {
if (VAR3[msg.sender].call.value(msg.value)())
FUN2(VAR3[msg.sender], msg.value);
} else {FUN1("", 0, "", "", 0x0);
contract VAR4 {
address public VAR5;
address public VAR6;
0
---------------------------------
39684.sol
function () payable {
if (msg.VAR1.VAR2 > 0) {
FUN1(msg.VAR1, 0, "", "", 0x0);
} else if (VAR3[msg.sender] != 0) {
if (VAR3[msg.sender].call.value(msg.value)())
FUN2(VAR3[msg.sender], msg.value);
} else {FUN1("", 0, "", "", 0x0);
contract VAR4 {
address public VAR5;
address public VAR6;
0
---------------------------------
39684.sol
function () payable {
if (msg.VAR1.VAR2 > 0) {
FUN1(msg.VAR1, 0, "", "", 0x0);
} else if (VAR3[msg.sender] != 0) {
if (VAR3[msg.sender].call.value(msg.value)())
FUN2(VAR3[msg.sender], msg.value);
} else {FUN1("", 0, "", "", 0x0);
contract VAR4 {
address public VAR5;
address public VAR6;
0
---------------------------------
39684.sol
function () payable {
if (msg.VAR1.VAR2 > 0) {
FUN1(msg.VAR1, 0, "", "", 0x0);
} else if (VAR3[msg.sender] != 0) {
if (VAR3[msg.sender].call.value(msg.value)())
FUN2(VAR3[msg.sender], msg.value);
} else {FUN1("", 0, "", "", 0x0);
contract VAR4 {
address public VAR5;
address public VAR6;
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9611.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
23387.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1){
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
23387.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1){
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
23387.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1){
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
23387.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1){
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
23387.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1){
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
23387.sol
function FUN1(uint VAR1) public ownerExists(msg.sender) confirmed(VAR1, msg.sender)  notExecuted(VAR1){
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
FUN3(VAR1);
else {
FUN4(VAR1);
VAR2.VAR4 = false;
function FUN5(uint VAR1) public ownerExists(msg.sender) FUN6(VAR1) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN7(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27334.sol
function FUN1() payable {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if ( FUN2(msg.sender) == VAR3) {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
39644.sol
function FUN1(address VAR1, address VAR2) {
if (msg.sender != VAR1 && msg.sender != VAR2) { throw; }
if(!FUN2(VAR1, VAR2)) { throw; }
uint32 VAR3 = VAR4[VAR1][VAR2];
delete VAR4[VAR1][VAR2];
if (!VAR2.call.value(VAR3).FUN3(23000)()) {  throw;  }
FUN4(VAR1, VAR2, VAR3);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
36563.sol
function FUN1(address VAR1, uint256 VAR2, bytes VAR3) onlyOwner {
require(VAR1 != address(0));
assert(VAR1.call.value(VAR2)(VAR3));
if (VAR2 > 0) {
FUN2(VAR1, VAR2, VAR3);
function() payable {
FUN3(msg.sender, msg.value);
0
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
11719.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR2[msg.sender]>=VAR1) {
if(msg.sender.call.value(VAR1)())  {
VAR2[msg.sender]-=VAR1;
VAR4.FUN2(msg.sender,VAR1,"");
function() public payable {
FUN3();
contract LogFile
struct Message
address VAR5;
string  VAR6;
uint VAR7;
uint  VAR8;
VAR9[] public VAR10;
Message VAR11;
1
---------------------------------
24007.sol
function FUN1() public payable {
if(VAR1[msg.sender]!=0 && VAR1[msg.sender]<VAR2) {
msg.sender.call.value(0.3 VAR3);
VAR1[msg.sender] = 0;
1
---------------------------------
24007.sol
function FUN1() public payable {
if(VAR1[msg.sender]!=0 && VAR1[msg.sender]<VAR2) {
msg.sender.call.value(0.3 VAR3);
VAR1[msg.sender] = 0;
1
---------------------------------
24007.sol
function FUN1() public payable {
if(VAR1[msg.sender]!=0 && VAR1[msg.sender]<VAR2) {
msg.sender.call.value(0.3 VAR3);
VAR1[msg.sender] = 0;
1
---------------------------------
1879.sol
function FUN1(address VAR1, bytes VAR2) payable external VAR3 {
FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
1879.sol
function FUN1(address VAR1, bytes VAR2) payable external VAR3 {
FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
1879.sol
function FUN1(address VAR1, bytes VAR2) payable external VAR3 {
FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
1879.sol
function FUN1(address VAR1, bytes VAR2) payable external VAR3 {
FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
1879.sol
function FUN1(address VAR1, bytes VAR2) payable external VAR3 {
FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
1879.sol
function FUN1(address VAR1, bytes VAR2) payable external VAR3 {
FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
1879.sol
function FUN1(address VAR1, bytes VAR2) payable external VAR3 {
FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
39269.sol
function FUN1() public preventReentry FUN2(msg.sender) returns (bool){
if (VAR1 == VAR2) return false;
TX memory VAR3 = VAR4[VAR1];
if(VAR5 < VAR3.VAR6) return false;
delete VAR4[VAR1++];
if(!VAR3.VAR7) {
if(VAR3.VAR8.call.value(VAR3.value)(VAR3.VAR9)) {
VAR10 -= VAR3.value;
FUN3(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return true;
if (VAR3.VAR11 == address(this)) {
VAR10 -= VAR3.value;
} else {VAR12[VAR3.VAR11].VAR13 += VAR3.value;
FUN4(VAR3.VAR11, VAR3.VAR8, VAR3.value);
return false;
0
---------------------------------
10604.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public onlyOwner returns (bool) {
return VAR1.call.value(value)(VAR2);
0
---------------------------------
10604.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public onlyOwner returns (bool) {
return VAR1.call.value(value)(VAR2);
0
---------------------------------
10604.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public onlyOwner returns (bool) {
return VAR1.call.value(value)(VAR2);
0
---------------------------------
10604.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public onlyOwner returns (bool) {
return VAR1.call.value(value)(VAR2);
0
---------------------------------
10604.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public onlyOwner returns (bool) {
return VAR1.call.value(value)(VAR2);
0
---------------------------------
10604.sol
function FUN1(address VAR1, uint256 value, bytes VAR2) public onlyOwner returns (bool) {
return VAR1.call.value(value)(VAR2);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
26188.sol
function FUN1() public payable {
require(VAR1>VAR2);
require(VAR3[msg.sender]>=VAR4);
uint VAR5 = VAR3[msg.sender]+VAR6;
VAR6 = 0;
VAR3[msg.sender]=0;
msg.sender.call.value(VAR5);
function FUN2() public payable {
require(VAR1>VAR2);
uint VAR7 = VAR3[msg.sender];
VAR3[msg.sender]=0;
msg.sender.call.value(VAR7);
0
---------------------------------
2021.sol
function FUN1(address VAR1, uint VAR2) internal returns(bool) {
return VAR1.call.value(VAR2)();
function FUN2(address VAR1, uint VAR2) internal {
if (!FUN1(VAR1, VAR2)) {
throw;
0
---------------------------------
2021.sol
function FUN1(address VAR1, uint VAR2) internal returns(bool) {
return VAR1.call.value(VAR2)();
function FUN2(address VAR1, uint VAR2) internal {
if (!FUN1(VAR1, VAR2)) {
throw;
0
---------------------------------
2021.sol
function FUN1(address VAR1, uint VAR2) internal returns(bool) {
return VAR1.call.value(VAR2)();
function FUN2(address VAR1, uint VAR2) internal {
if (!FUN1(VAR1, VAR2)) {
throw;
0
---------------------------------
14274.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
if (!msg.sender.call.value(VAR1)()) {
revert();
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
function FUN4(address VAR3, uint VAR4, address VAR5, uint VAR6,   uint VAR7, uint VAR8, address VAR9, uint8 VAR10, bytes32 VAR11, bytes32 VAR12, uint VAR1, address VAR13) payable {
uint VAR14 = FUN5(VAR1, 1004) / 1000;
if (VAR3 == address(0)) {
if (msg.value != VAR14) {
revert();
FUN6(VAR13).VAR15.value(VAR14)();
} else {
if (!FUN7(VAR3).FUN8(msg.sender, this, VAR14)) {
revert();
if (!FUN7(VAR3).FUN9(VAR13, VAR14)) {
revert();
FUN6(VAR13).FUN10(VAR3, VAR14);
FUN6(VAR13).FUN11(VAR3, VAR4, VAR5, VAR6,VAR7, VAR8, VAR9, VAR10, VAR11, VAR12, VAR1);
VAR14 = FUN6(VAR13).FUN12(VAR5, this);
uint VAR16 = FUN5(VAR6, VAR1) / VAR4;
if (VAR5 == address(0)) {FUN6(VAR13).FUN1(VAR14);
msg.sender.transfer(VAR16);
} else {
FUN6(VAR13).FUN13(VAR5, VAR14);
if (!FUN7(VAR5).transfer(msg.sender, VAR16)) {
revert();
0
---------------------------------
14274.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
if (!msg.sender.call.value(VAR1)()) {
revert();
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
function FUN4(address VAR3, uint VAR4, address VAR5, uint VAR6,   uint VAR7, uint VAR8, address VAR9, uint8 VAR10, bytes32 VAR11, bytes32 VAR12, uint VAR1, address VAR13) payable {
uint VAR14 = FUN5(VAR1, 1004) / 1000;
if (VAR3 == address(0)) {
if (msg.value != VAR14) {
revert();
FUN6(VAR13).VAR15.value(VAR14)();
} else {
if (!FUN7(VAR3).FUN8(msg.sender, this, VAR14)) {
revert();
if (!FUN7(VAR3).FUN9(VAR13, VAR14)) {
revert();
FUN6(VAR13).FUN10(VAR3, VAR14);
FUN6(VAR13).FUN11(VAR3, VAR4, VAR5, VAR6,VAR7, VAR8, VAR9, VAR10, VAR11, VAR12, VAR1);
VAR14 = FUN6(VAR13).FUN12(VAR5, this);
uint VAR16 = FUN5(VAR6, VAR1) / VAR4;
if (VAR5 == address(0)) {FUN6(VAR13).FUN1(VAR14);
msg.sender.transfer(VAR16);
} else {
FUN6(VAR13).FUN13(VAR5, VAR14);
if (!FUN7(VAR5).transfer(msg.sender, VAR16)) {
revert();
0
---------------------------------
14274.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
if (!msg.sender.call.value(VAR1)()) {
revert();
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
function FUN4(address VAR3, uint VAR4, address VAR5, uint VAR6,   uint VAR7, uint VAR8, address VAR9, uint8 VAR10, bytes32 VAR11, bytes32 VAR12, uint VAR1, address VAR13) payable {
uint VAR14 = FUN5(VAR1, 1004) / 1000;
if (VAR3 == address(0)) {
if (msg.value != VAR14) {
revert();
FUN6(VAR13).VAR15.value(VAR14)();
} else {
if (!FUN7(VAR3).FUN8(msg.sender, this, VAR14)) {
revert();
if (!FUN7(VAR3).FUN9(VAR13, VAR14)) {
revert();
FUN6(VAR13).FUN10(VAR3, VAR14);
FUN6(VAR13).FUN11(VAR3, VAR4, VAR5, VAR6,VAR7, VAR8, VAR9, VAR10, VAR11, VAR12, VAR1);
VAR14 = FUN6(VAR13).FUN12(VAR5, this);
uint VAR16 = FUN5(VAR6, VAR1) / VAR4;
if (VAR5 == address(0)) {FUN6(VAR13).FUN1(VAR14);
msg.sender.transfer(VAR16);
} else {
FUN6(VAR13).FUN13(VAR5, VAR14);
if (!FUN7(VAR5).transfer(msg.sender, VAR16)) {
revert();
0
---------------------------------
14274.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
if (!msg.sender.call.value(VAR1)()) {
revert();
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
function FUN4(address VAR3, uint VAR4, address VAR5, uint VAR6,   uint VAR7, uint VAR8, address VAR9, uint8 VAR10, bytes32 VAR11, bytes32 VAR12, uint VAR1, address VAR13) payable {
uint VAR14 = FUN5(VAR1, 1004) / 1000;
if (VAR3 == address(0)) {
if (msg.value != VAR14) {
revert();
FUN6(VAR13).VAR15.value(VAR14)();
} else {
if (!FUN7(VAR3).FUN8(msg.sender, this, VAR14)) {
revert();
if (!FUN7(VAR3).FUN9(VAR13, VAR14)) {
revert();
FUN6(VAR13).FUN10(VAR3, VAR14);
FUN6(VAR13).FUN11(VAR3, VAR4, VAR5, VAR6,VAR7, VAR8, VAR9, VAR10, VAR11, VAR12, VAR1);
VAR14 = FUN6(VAR13).FUN12(VAR5, this);
uint VAR16 = FUN5(VAR6, VAR1) / VAR4;
if (VAR5 == address(0)) {FUN6(VAR13).FUN1(VAR14);
msg.sender.transfer(VAR16);
} else {
FUN6(VAR13).FUN13(VAR5, VAR14);
if (!FUN7(VAR5).transfer(msg.sender, VAR16)) {
revert();
0
---------------------------------
14274.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
if (!msg.sender.call.value(VAR1)()) {
revert();
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
function FUN4(address VAR3, uint VAR4, address VAR5, uint VAR6,   uint VAR7, uint VAR8, address VAR9, uint8 VAR10, bytes32 VAR11, bytes32 VAR12, uint VAR1, address VAR13) payable {
uint VAR14 = FUN5(VAR1, 1004) / 1000;
if (VAR3 == address(0)) {
if (msg.value != VAR14) {
revert();
FUN6(VAR13).VAR15.value(VAR14)();
} else {
if (!FUN7(VAR3).FUN8(msg.sender, this, VAR14)) {
revert();
if (!FUN7(VAR3).FUN9(VAR13, VAR14)) {
revert();
FUN6(VAR13).FUN10(VAR3, VAR14);
FUN6(VAR13).FUN11(VAR3, VAR4, VAR5, VAR6,VAR7, VAR8, VAR9, VAR10, VAR11, VAR12, VAR1);
VAR14 = FUN6(VAR13).FUN12(VAR5, this);
uint VAR16 = FUN5(VAR6, VAR1) / VAR4;
if (VAR5 == address(0)) {FUN6(VAR13).FUN1(VAR14);
msg.sender.transfer(VAR16);
} else {
FUN6(VAR13).FUN13(VAR5, VAR14);
if (!FUN7(VAR5).transfer(msg.sender, VAR16)) {
revert();
0
---------------------------------
14274.sol
function FUN1(uint VAR1) {
require(VAR2[0][msg.sender] >= VAR1);
VAR2[0][msg.sender] = FUN2(VAR2[0][msg.sender], VAR1);
if (!msg.sender.call.value(VAR1)()) {
revert();
FUN3(0, msg.sender, VAR1, VAR2[0][msg.sender]);
function FUN4(address VAR3, uint VAR4, address VAR5, uint VAR6,   uint VAR7, uint VAR8, address VAR9, uint8 VAR10, bytes32 VAR11, bytes32 VAR12, uint VAR1, address VAR13) payable {
uint VAR14 = FUN5(VAR1, 1004) / 1000;
if (VAR3 == address(0)) {
if (msg.value != VAR14) {
revert();
FUN6(VAR13).VAR15.value(VAR14)();
} else {
if (!FUN7(VAR3).FUN8(msg.sender, this, VAR14)) {
revert();
if (!FUN7(VAR3).FUN9(VAR13, VAR14)) {
revert();
FUN6(VAR13).FUN10(VAR3, VAR14);
FUN6(VAR13).FUN11(VAR3, VAR4, VAR5, VAR6,VAR7, VAR8, VAR9, VAR10, VAR11, VAR12, VAR1);
VAR14 = FUN6(VAR13).FUN12(VAR5, this);
uint VAR16 = FUN5(VAR6, VAR1) / VAR4;
if (VAR5 == address(0)) {FUN6(VAR13).FUN1(VAR14);
msg.sender.transfer(VAR16);
} else {
FUN6(VAR13).FUN13(VAR5, VAR14);
if (!FUN7(VAR5).transfer(msg.sender, VAR16)) {
revert();
0
---------------------------------
40341.sol
function FUN1(address VAR1,  uint VAR2,  uint VAR3 ) internal returns (bool VAR4) {
return VAR1.call.value(VAR2).FUN2(VAR3)();
contract FundsHolderMixin is VAR5, VAR6 {
mapping (address => uint) VAR7;
event FUN3(
address VAR8,
address VAR9,
uint VAR10
);
function FUN4(address VAR1, uint VAR2, uint VAR3 ) internal {
if (msg.value != 0) {   throw;   }
address VAR8 = msg.sender;
if (VAR2 > VAR7[VAR8]) {  throw;    }
VAR7[VAR8] -= VAR2;
bool VAR11 = FUN1(  VAR1,   VAR2,   VAR3 );
if (!VAR11) { throw;   }
FUN3(VAR8, VAR1, VAR2);
contract VAR12 {
function FUN5(uint VAR13) internal {
address VAR14 = FUN6().VAR14;
FUN6().VAR15 = VAR13;
bool VAR11 = FUN1(  VAR14, VAR13,VAR16  );
if (VAR11) {
FUN7(VAR14, VAR13);
} else {
VAR7[VAR14] += VAR13;
FUN8(VAR14, VAR13);
contract VAR17 {
0
---------------------------------
40341.sol
function FUN1(address VAR1,  uint VAR2,  uint VAR3 ) internal returns (bool VAR4) {
return VAR1.call.value(VAR2).FUN2(VAR3)();
contract FundsHolderMixin is VAR5, VAR6 {
mapping (address => uint) VAR7;
event FUN3(
address VAR8,
address VAR9,
uint VAR10
);
function FUN4(address VAR1, uint VAR2, uint VAR3 ) internal {
if (msg.value != 0) {   throw;   }
address VAR8 = msg.sender;
if (VAR2 > VAR7[VAR8]) {  throw;    }
VAR7[VAR8] -= VAR2;
bool VAR11 = FUN1(  VAR1,   VAR2,   VAR3 );
if (!VAR11) { throw;   }
FUN3(VAR8, VAR1, VAR2);
contract VAR12 {
function FUN5(uint VAR13) internal {
address VAR14 = FUN6().VAR14;
FUN6().VAR15 = VAR13;
bool VAR11 = FUN1(  VAR14, VAR13,VAR16  );
if (VAR11) {
FUN7(VAR14, VAR13);
} else {
VAR7[VAR14] += VAR13;
FUN8(VAR14, VAR13);
contract VAR17 {
0
---------------------------------
40341.sol
function FUN1(address VAR1,  uint VAR2,  uint VAR3 ) internal returns (bool VAR4) {
return VAR1.call.value(VAR2).FUN2(VAR3)();
contract FundsHolderMixin is VAR5, VAR6 {
mapping (address => uint) VAR7;
event FUN3(
address VAR8,
address VAR9,
uint VAR10
);
function FUN4(address VAR1, uint VAR2, uint VAR3 ) internal {
if (msg.value != 0) {   throw;   }
address VAR8 = msg.sender;
if (VAR2 > VAR7[VAR8]) {  throw;    }
VAR7[VAR8] -= VAR2;
bool VAR11 = FUN1(  VAR1,   VAR2,   VAR3 );
if (!VAR11) { throw;   }
FUN3(VAR8, VAR1, VAR2);
contract VAR12 {
function FUN5(uint VAR13) internal {
address VAR14 = FUN6().VAR14;
FUN6().VAR15 = VAR13;
bool VAR11 = FUN1(  VAR14, VAR13,VAR16  );
if (VAR11) {
FUN7(VAR14, VAR13);
} else {
VAR7[VAR14] += VAR13;
FUN8(VAR14, VAR13);
contract VAR17 {
0
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
SendBalance.sol
function FUN1(){
if (!(msg.sender.call.value(VAR1[msg.sender])())) { throw ; }
VAR1[msg.sender] = 0;
1
---------------------------------
39866.sol
function FUN1() payable {
if(VAR1||VAR2.VAR3<VAR4||VAR2.VAR3>VAR4+VAR5) throw;
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR7 || msg.value>msg.value*VAR7) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR7;
FUN2(msg.sender,msg.value);
function FUN3(string VAR9) payable{
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR10 || msg.value>msg.value*VAR10) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR10;
VAR11[msg.sender]=VAR9;
FUN4(msg.sender,msg.value);
1
---------------------------------
39866.sol
function FUN1() payable {
if(VAR1||VAR2.VAR3<VAR4||VAR2.VAR3>VAR4+VAR5) throw;
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR7 || msg.value>msg.value*VAR7) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR7;
FUN2(msg.sender,msg.value);
function FUN3(string VAR9) payable{
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR10 || msg.value>msg.value*VAR10) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR10;
VAR11[msg.sender]=VAR9;
FUN4(msg.sender,msg.value);
1
---------------------------------
39866.sol
function FUN1() payable {
if(VAR1||VAR2.VAR3<VAR4||VAR2.VAR3>VAR4+VAR5) throw;
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR7 || msg.value>msg.value*VAR7) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR7;
FUN2(msg.sender,msg.value);
function FUN3(string VAR9) payable{
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR10 || msg.value>msg.value*VAR10) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR10;
VAR11[msg.sender]=VAR9;
FUN4(msg.sender,msg.value);
1
---------------------------------
39866.sol
function FUN1() payable {
if(VAR1||VAR2.VAR3<VAR4||VAR2.VAR3>VAR4+VAR5) throw;
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR7 || msg.value>msg.value*VAR7) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR7;
FUN2(msg.sender,msg.value);
function FUN3(string VAR9) payable{
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR10 || msg.value>msg.value*VAR10) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR10;
VAR11[msg.sender]=VAR9;
FUN4(msg.sender,msg.value);
1
---------------------------------
39866.sol
function FUN1() payable {
if(VAR1||VAR2.VAR3<VAR4||VAR2.VAR3>VAR4+VAR5) throw;
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR7 || msg.value>msg.value*VAR7) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR7;
FUN2(msg.sender,msg.value);
function FUN3(string VAR9) payable{
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR10 || msg.value>msg.value*VAR10) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR10;
VAR11[msg.sender]=VAR9;
FUN4(msg.sender,msg.value);
1
---------------------------------
39866.sol
function FUN1() payable {
if(VAR1||VAR2.VAR3<VAR4||VAR2.VAR3>VAR4+VAR5) throw;
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR7 || msg.value>msg.value*VAR7) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR7;
FUN2(msg.sender,msg.value);
function FUN3(string VAR9) payable{
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR10 || msg.value>msg.value*VAR10) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR10;
VAR11[msg.sender]=VAR9;
FUN4(msg.sender,msg.value);
1
---------------------------------
39866.sol
function FUN1() payable {
if(VAR1||VAR2.VAR3<VAR4||VAR2.VAR3>VAR4+VAR5) throw;
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR7 || msg.value>msg.value*VAR7) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR7;
FUN2(msg.sender,msg.value);
function FUN3(string VAR9) payable{
if(VAR6[msg.sender]>VAR6[msg.sender]+msg.value*VAR10 || msg.value>msg.value*VAR10) throw;
if(!VAR8.call.value(msg.value)()) throw;
VAR6[msg.sender]+=msg.value*VAR10;
VAR11[msg.sender]=VAR9;
FUN4(msg.sender,msg.value);
1
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39127.sol
function FUN1(uint256 VAR1, bytes VAR2) onlyCongressMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR3.VAR5 != VAR6.VAR7) throw;
VAR3.VAR5 = VAR6.VAR8;
if (!VAR3.VAR9.call.value(VAR3.VAR10 * 1 VAR11)(VAR2)) { throw; }
FUN2(VAR1);
0
---------------------------------
39912.sol
function FUN1() public payable {
bytes4 VAR1 = bytes4(FUN2(""));
if (!VAR2.call.value(msg.value)(VAR1)) throw;
bytes4 VAR3 = bytes4(FUN2(""));
if (!VAR2.call(VAR3, msg.sender, msg.value)) throw;
0
---------------------------------
39912.sol
function FUN1() public payable {
bytes4 VAR1 = bytes4(FUN2(""));
if (!VAR2.call.value(msg.value)(VAR1)) throw;
bytes4 VAR3 = bytes4(FUN2(""));
if (!VAR2.call(VAR3, msg.sender, msg.value)) throw;
0
---------------------------------
39912.sol
function FUN1() public payable {
bytes4 VAR1 = bytes4(FUN2(""));
if (!VAR2.call.value(msg.value)(VAR1)) throw;
bytes4 VAR3 = bytes4(FUN2(""));
if (!VAR2.call(VAR3, msg.sender, msg.value)) throw;
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
34577.sol
function FUN1(bytes32 VAR1) public notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];
VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))
revert();
FUN3(VAR1);
function FUN4(bytes32 VAR1)   public   ownerExists(msg.sender)    notConfirmed(VAR1, msg.sender) {
VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
cross-function-reentrancy-fixed.sol
function FUN1(address VAR1) public {
uint VAR2 = VAR3[VAR1];
VAR3[VAR1] = 0;
if (VAR1.call.value(VAR2)() == false) {  throw;}
function FUN2(address VAR1) public {
if (VAR4[VAR1] == false) {throw;}
VAR4[VAR1] = true;
VAR3[VAR1] += 100;
FUN1(VAR1);
0
---------------------------------
cross-function-reentrancy-fixed.sol
function FUN1(address VAR1) public {
uint VAR2 = VAR3[VAR1];
VAR3[VAR1] = 0;
if (VAR1.call.value(VAR2)() == false) {  throw;}
function FUN2(address VAR1) public {
if (VAR4[VAR1] == false) {throw;}
VAR4[VAR1] = true;
VAR3[VAR1] += 100;
FUN1(VAR1);
0
---------------------------------
cross-function-reentrancy-fixed.sol
function FUN1(address VAR1) public {
uint VAR2 = VAR3[VAR1];
VAR3[VAR1] = 0;
if (VAR1.call.value(VAR2)() == false) {  throw;}
function FUN2(address VAR1) public {
if (VAR4[VAR1] == false) {throw;}
VAR4[VAR1] = true;
VAR3[VAR1] += 100;
FUN1(VAR1);
0
---------------------------------
cross-function-reentrancy-fixed.sol
function FUN1(address VAR1) public {
uint VAR2 = VAR3[VAR1];
VAR3[VAR1] = 0;
if (VAR1.call.value(VAR2)() == false) {  throw;}
function FUN2(address VAR1) public {
if (VAR4[VAR1] == false) {throw;}
VAR4[VAR1] = true;
VAR3[VAR1] += 100;
FUN1(VAR1);
0
---------------------------------
cross-function-reentrancy-fixed.sol
function FUN1(address VAR1) public {
uint VAR2 = VAR3[VAR1];
VAR3[VAR1] = 0;
if (VAR1.call.value(VAR2)() == false) {  throw;}
function FUN2(address VAR1) public {
if (VAR4[VAR1] == false) {throw;}
VAR4[VAR1] = true;
VAR3[VAR1] += 100;
FUN1(VAR1);
0
---------------------------------
cross-function-reentrancy-fixed.sol
function FUN1(address VAR1) public {
uint VAR2 = VAR3[VAR1];
VAR3[VAR1] = 0;
if (VAR1.call.value(VAR2)() == false) {  throw;}
function FUN2(address VAR1) public {
if (VAR4[VAR1] == false) {throw;}
VAR4[VAR1] = true;
VAR3[VAR1] += 100;
FUN1(VAR1);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21999.sol
function call(address VAR1, bytes VAR2, uint256 VAR3) public payable onlyOwner {
if (msg.value > 0)
FUN1();
require(VAR1.call.value(VAR3)(VAR2));
FUN2(msg.sender, VAR1, VAR3);
0
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
21755.sol
function FUN1(uint VAR1) public payable  {
var VAR2 = VAR3[msg.sender];
if( VAR2.VAR4>=VAR5 && VAR2.VAR4>=VAR1 && VAR6>VAR2.VAR7) {
if(msg.sender.call.value(VAR1)())  {
VAR2.VAR4-=VAR1;
VAR8.FUN2(msg.sender,VAR1,"");
function()     public     payable   {
FUN3(0);
contract Log
struct Message
address VAR9;
string  VAR10;
uint VAR11;
uint  VAR12;
VAR13[] public VAR14;
Message VAR15;
1
---------------------------------
16884.sol
function FUN1(address VAR1,  uint256 VAR2) public onlyManager() {
require(VAR1.call.value(VAR2)());
0
---------------------------------
16884.sol
function FUN1(address VAR1,  uint256 VAR2) public onlyManager() {
require(VAR1.call.value(VAR2)());
0
---------------------------------
16884.sol
function FUN1(address VAR1,  uint256 VAR2) public onlyManager() {
require(VAR1.call.value(VAR2)());
0
---------------------------------
16884.sol
function FUN1(address VAR1,  uint256 VAR2) public onlyManager() {
require(VAR1.call.value(VAR2)());
0
---------------------------------
16884.sol
function FUN1(address VAR1,  uint256 VAR2) public onlyManager() {
require(VAR1.call.value(VAR2)());
0
---------------------------------
16884.sol
function FUN1(address VAR1,  uint256 VAR2) public onlyManager() {
require(VAR1.call.value(VAR2)());
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
22074.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender]) {
msg.sender.call.value(VAR1);
VAR2[msg.sender]-=VAR1;
1
---------------------------------
22074.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender]) {
msg.sender.call.value(VAR1);
VAR2[msg.sender]-=VAR1;
1
---------------------------------
22074.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender]) {
msg.sender.call.value(VAR1);
VAR2[msg.sender]-=VAR1;
1
---------------------------------
22074.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender]) {
msg.sender.call.value(VAR1);
VAR2[msg.sender]-=VAR1;
1
---------------------------------
22074.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender]) {
msg.sender.call.value(VAR1);
VAR2[msg.sender]-=VAR1;
1
---------------------------------
22074.sol
function FUN1(uint VAR1) public payable {
if(VAR2[msg.sender]>=VAR3 && VAR1<=VAR2[msg.sender]) {
msg.sender.call.value(VAR1);
VAR2[msg.sender]-=VAR1;
1
---------------------------------
39326.sol
function FUN1( uint256 VAR1, bytes   VAR2) onlyMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR5 < VAR3.VAR6 || VAR3.VAR7 || VAR3.VAR8 != FUN2(VAR3.VAR9, VAR3.VAR10, VAR2) || VAR3.VAR11 < VAR12)  throw;
if (VAR3.VAR13 > VAR14) {
VAR3.VAR7 = true;
if (!VAR3.VAR9.call.value(VAR3.VAR10)(VAR2))  throw;
VAR3.VAR15 = true;
} else {
VAR3.VAR15 = false;
FUN3(VAR1, VAR3.VAR11, VAR3.VAR15);
library VAR16 {
0
---------------------------------
39326.sol
function FUN1( uint256 VAR1, bytes   VAR2) onlyMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR5 < VAR3.VAR6 || VAR3.VAR7 || VAR3.VAR8 != FUN2(VAR3.VAR9, VAR3.VAR10, VAR2) || VAR3.VAR11 < VAR12)  throw;
if (VAR3.VAR13 > VAR14) {
VAR3.VAR7 = true;
if (!VAR3.VAR9.call.value(VAR3.VAR10)(VAR2))  throw;
VAR3.VAR15 = true;
} else {
VAR3.VAR15 = false;
FUN3(VAR1, VAR3.VAR11, VAR3.VAR15);
library VAR16 {
0
---------------------------------
39326.sol
function FUN1( uint256 VAR1, bytes   VAR2) onlyMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR5 < VAR3.VAR6 || VAR3.VAR7 || VAR3.VAR8 != FUN2(VAR3.VAR9, VAR3.VAR10, VAR2) || VAR3.VAR11 < VAR12)  throw;
if (VAR3.VAR13 > VAR14) {
VAR3.VAR7 = true;
if (!VAR3.VAR9.call.value(VAR3.VAR10)(VAR2))  throw;
VAR3.VAR15 = true;
} else {
VAR3.VAR15 = false;
FUN3(VAR1, VAR3.VAR11, VAR3.VAR15);
library VAR16 {
0
---------------------------------
39326.sol
function FUN1( uint256 VAR1, bytes   VAR2) onlyMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR5 < VAR3.VAR6 || VAR3.VAR7 || VAR3.VAR8 != FUN2(VAR3.VAR9, VAR3.VAR10, VAR2) || VAR3.VAR11 < VAR12)  throw;
if (VAR3.VAR13 > VAR14) {
VAR3.VAR7 = true;
if (!VAR3.VAR9.call.value(VAR3.VAR10)(VAR2))  throw;
VAR3.VAR15 = true;
} else {
VAR3.VAR15 = false;
FUN3(VAR1, VAR3.VAR11, VAR3.VAR15);
library VAR16 {
0
---------------------------------
39326.sol
function FUN1( uint256 VAR1, bytes   VAR2) onlyMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR5 < VAR3.VAR6 || VAR3.VAR7 || VAR3.VAR8 != FUN2(VAR3.VAR9, VAR3.VAR10, VAR2) || VAR3.VAR11 < VAR12)  throw;
if (VAR3.VAR13 > VAR14) {
VAR3.VAR7 = true;
if (!VAR3.VAR9.call.value(VAR3.VAR10)(VAR2))  throw;
VAR3.VAR15 = true;
} else {
VAR3.VAR15 = false;
FUN3(VAR1, VAR3.VAR11, VAR3.VAR15);
library VAR16 {
0
---------------------------------
39326.sol
function FUN1( uint256 VAR1, bytes   VAR2) onlyMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR5 < VAR3.VAR6 || VAR3.VAR7 || VAR3.VAR8 != FUN2(VAR3.VAR9, VAR3.VAR10, VAR2) || VAR3.VAR11 < VAR12)  throw;
if (VAR3.VAR13 > VAR14) {
VAR3.VAR7 = true;
if (!VAR3.VAR9.call.value(VAR3.VAR10)(VAR2))  throw;
VAR3.VAR15 = true;
} else {
VAR3.VAR15 = false;
FUN3(VAR1, VAR3.VAR11, VAR3.VAR15);
library VAR16 {
0
---------------------------------
5629.sol
constructor () public payable {
fomo3d VAR1 = FUN1(address(0xA62142888ABa8370742bE823c1782D17A0389Da1));
require(address(0xA62142888ABa8370742bE823c1782D17A0389Da1).call.value(msg.value)());
(,,,uint VAR2,,,) = VAR1.FUN2(address(this));
require(VAR2 > 0.1 VAR3);
VAR1.FUN3();
FUN4(msg.sender);
0
---------------------------------
5629.sol
constructor () public payable {
fomo3d VAR1 = FUN1(address(0xA62142888ABa8370742bE823c1782D17A0389Da1));
require(address(0xA62142888ABa8370742bE823c1782D17A0389Da1).call.value(msg.value)());
(,,,uint VAR2,,,) = VAR1.FUN2(address(this));
require(VAR2 > 0.1 VAR3);
VAR1.FUN3();
FUN4(msg.sender);
0
---------------------------------
5629.sol
constructor () public payable {
fomo3d VAR1 = FUN1(address(0xA62142888ABa8370742bE823c1782D17A0389Da1));
require(address(0xA62142888ABa8370742bE823c1782D17A0389Da1).call.value(msg.value)());
(,,,uint VAR2,,,) = VAR1.FUN2(address(this));
require(VAR2 > 0.1 VAR3);
VAR1.FUN3();
FUN4(msg.sender);
0
---------------------------------
3270.sol
function FUN1() public {
if (VAR1.FUN2() > 50) { revert(); }
address(VAR1).call.value(VAR1.FUN3() *2 )();
VAR1.FUN4();
0
---------------------------------
3270.sol
function FUN1() public {
if (VAR1.FUN2() > 50) { revert(); }
address(VAR1).call.value(VAR1.FUN3() *2 )();
VAR1.FUN4();
0
---------------------------------
3270.sol
function FUN1() public {
if (VAR1.FUN2() > 50) { revert(); }
address(VAR1).call.value(VAR1.FUN3() *2 )();
VAR1.FUN4();
0
---------------------------------
3270.sol
function FUN1() public {
if (VAR1.FUN2() > 50) { revert(); }
address(VAR1).call.value(VAR1.FUN3() *2 )();
VAR1.FUN4();
0
---------------------------------
3270.sol
function FUN1() public {
if (VAR1.FUN2() > 50) { revert(); }
address(VAR1).call.value(VAR1.FUN3() *2 )();
VAR1.FUN4();
0
---------------------------------
3270.sol
function FUN1() public {
if (VAR1.FUN2() > 50) { revert(); }
address(VAR1).call.value(VAR1.FUN3() *2 )();
VAR1.FUN4();
0
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
16925.sol
function FUN1() public{
assert(msg.sender.call.value(VAR1[msg.sender])()) ;
VAR1[msg.sender] = 0;
1
---------------------------------
21390.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable  {
if(msg.sender != address(this)) throw;
if(VAR2=="In")   {
FUN2(msg.value,"In",VAR3);
VAR5[VAR3] += VAR1;
}  else {
uint VAR6 = 0;
if(VAR3==VAR4) {
VAR6=VAR1;
}  else {
VAR6=VAR1/100*99;
VAR5[VAR4]+=VAR1-VAR6;
if(VAR3.call.value(VAR1)()==false) throw;
VAR5[VAR3] -= VAR1;
FUN2(VAR1, "Out", VAR3);
function() payable {
FUN3(msg.sender);
function FUN4(uint VAR7) payable {
if(VAR5[msg.sender]<VAR8)throw;
if(VAR5[msg.sender]<VAR7)throw;
this.FUN1(VAR7,"",msg.sender,VAR9);
function FUN3(address VAR10) payable {
if(VAR10==0x0)VAR10 = VAR9;
if(msg.sender!=VAR11.VAR12)throw;
this.FUN1(msg.value, "", VAR10,VAR9);
1
---------------------------------
21390.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable  {
if(msg.sender != address(this)) throw;
if(VAR2=="In")   {
FUN2(msg.value,"In",VAR3);
VAR5[VAR3] += VAR1;
}  else {
uint VAR6 = 0;
if(VAR3==VAR4) {
VAR6=VAR1;
}  else {
VAR6=VAR1/100*99;
VAR5[VAR4]+=VAR1-VAR6;
if(VAR3.call.value(VAR1)()==false) throw;
VAR5[VAR3] -= VAR1;
FUN2(VAR1, "Out", VAR3);
function() payable {
FUN3(msg.sender);
function FUN4(uint VAR7) payable {
if(VAR5[msg.sender]<VAR8)throw;
if(VAR5[msg.sender]<VAR7)throw;
this.FUN1(VAR7,"",msg.sender,VAR9);
function FUN3(address VAR10) payable {
if(VAR10==0x0)VAR10 = VAR9;
if(msg.sender!=VAR11.VAR12)throw;
this.FUN1(msg.value, "", VAR10,VAR9);
1
---------------------------------
21390.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable  {
if(msg.sender != address(this)) throw;
if(VAR2=="In")   {
FUN2(msg.value,"In",VAR3);
VAR5[VAR3] += VAR1;
}  else {
uint VAR6 = 0;
if(VAR3==VAR4) {
VAR6=VAR1;
}  else {
VAR6=VAR1/100*99;
VAR5[VAR4]+=VAR1-VAR6;
if(VAR3.call.value(VAR1)()==false) throw;
VAR5[VAR3] -= VAR1;
FUN2(VAR1, "Out", VAR3);
function() payable {
FUN3(msg.sender);
function FUN4(uint VAR7) payable {
if(VAR5[msg.sender]<VAR8)throw;
if(VAR5[msg.sender]<VAR7)throw;
this.FUN1(VAR7,"",msg.sender,VAR9);
function FUN3(address VAR10) payable {
if(VAR10==0x0)VAR10 = VAR9;
if(msg.sender!=VAR11.VAR12)throw;
this.FUN1(msg.value, "", VAR10,VAR9);
1
---------------------------------
21390.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable  {
if(msg.sender != address(this)) throw;
if(VAR2=="In")   {
FUN2(msg.value,"In",VAR3);
VAR5[VAR3] += VAR1;
}  else {
uint VAR6 = 0;
if(VAR3==VAR4) {
VAR6=VAR1;
}  else {
VAR6=VAR1/100*99;
VAR5[VAR4]+=VAR1-VAR6;
if(VAR3.call.value(VAR1)()==false) throw;
VAR5[VAR3] -= VAR1;
FUN2(VAR1, "Out", VAR3);
function() payable {
FUN3(msg.sender);
function FUN4(uint VAR7) payable {
if(VAR5[msg.sender]<VAR8)throw;
if(VAR5[msg.sender]<VAR7)throw;
this.FUN1(VAR7,"",msg.sender,VAR9);
function FUN3(address VAR10) payable {
if(VAR10==0x0)VAR10 = VAR9;
if(msg.sender!=VAR11.VAR12)throw;
this.FUN1(msg.value, "", VAR10,VAR9);
1
---------------------------------
21390.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable  {
if(msg.sender != address(this)) throw;
if(VAR2=="In")   {
FUN2(msg.value,"In",VAR3);
VAR5[VAR3] += VAR1;
}  else {
uint VAR6 = 0;
if(VAR3==VAR4) {
VAR6=VAR1;
}  else {
VAR6=VAR1/100*99;
VAR5[VAR4]+=VAR1-VAR6;
if(VAR3.call.value(VAR1)()==false) throw;
VAR5[VAR3] -= VAR1;
FUN2(VAR1, "Out", VAR3);
function() payable {
FUN3(msg.sender);
function FUN4(uint VAR7) payable {
if(VAR5[msg.sender]<VAR8)throw;
if(VAR5[msg.sender]<VAR7)throw;
this.FUN1(VAR7,"",msg.sender,VAR9);
function FUN3(address VAR10) payable {
if(VAR10==0x0)VAR10 = VAR9;
if(msg.sender!=VAR11.VAR12)throw;
this.FUN1(msg.value, "", VAR10,VAR9);
1
---------------------------------
21390.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable  {
if(msg.sender != address(this)) throw;
if(VAR2=="In")   {
FUN2(msg.value,"In",VAR3);
VAR5[VAR3] += VAR1;
}  else {
uint VAR6 = 0;
if(VAR3==VAR4) {
VAR6=VAR1;
}  else {
VAR6=VAR1/100*99;
VAR5[VAR4]+=VAR1-VAR6;
if(VAR3.call.value(VAR1)()==false) throw;
VAR5[VAR3] -= VAR1;
FUN2(VAR1, "Out", VAR3);
function() payable {
FUN3(msg.sender);
function FUN4(uint VAR7) payable {
if(VAR5[msg.sender]<VAR8)throw;
if(VAR5[msg.sender]<VAR7)throw;
this.FUN1(VAR7,"",msg.sender,VAR9);
function FUN3(address VAR10) payable {
if(VAR10==0x0)VAR10 = VAR9;
if(msg.sender!=VAR11.VAR12)throw;
this.FUN1(msg.value, "", VAR10,VAR9);
1
---------------------------------
21390.sol
function FUN1(uint VAR1, bytes32 VAR2, address VAR3, address VAR4) payable  {
if(msg.sender != address(this)) throw;
if(VAR2=="In")   {
FUN2(msg.value,"In",VAR3);
VAR5[VAR3] += VAR1;
}  else {
uint VAR6 = 0;
if(VAR3==VAR4) {
VAR6=VAR1;
}  else {
VAR6=VAR1/100*99;
VAR5[VAR4]+=VAR1-VAR6;
if(VAR3.call.value(VAR1)()==false) throw;
VAR5[VAR3] -= VAR1;
FUN2(VAR1, "Out", VAR3);
function() payable {
FUN3(msg.sender);
function FUN4(uint VAR7) payable {
if(VAR5[msg.sender]<VAR8)throw;
if(VAR5[msg.sender]<VAR7)throw;
this.FUN1(VAR7,"",msg.sender,VAR9);
function FUN3(address VAR10) payable {
if(VAR10==0x0)VAR10 = VAR9;
if(msg.sender!=VAR11.VAR12)throw;
this.FUN1(msg.value, "", VAR10,VAR9);
1
---------------------------------
2387.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
2387.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
2387.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
2387.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
2387.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
2387.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
14458.sol
function transfer(address VAR1, uint256 VAR2, bytes VAR3, string VAR4) public VAR5 FUN1(VAR1) returns (bool VAR6){
require(VAR1 != address(0));
if(FUN2(VAR1)) {
if(VAR7[msg.sender].VAR8 < VAR2){
revert();
if(FUN3(VAR7[VAR1].VAR8, VAR2) < VAR7[VAR1].VAR8){
revert();
FUN4();
FUN5(msg.sender, VAR2);
FUN6(VAR1, VAR2);
assert(VAR1.call.value(0)(bytes4(FUN7(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2);
return true;
} else {
return FUN8(msg.sender, VAR1, VAR2, VAR3);
0
---------------------------------
14458.sol
function transfer(address VAR1, uint256 VAR2, bytes VAR3, string VAR4) public VAR5 FUN1(VAR1) returns (bool VAR6){
require(VAR1 != address(0));
if(FUN2(VAR1)) {
if(VAR7[msg.sender].VAR8 < VAR2){
revert();
if(FUN3(VAR7[VAR1].VAR8, VAR2) < VAR7[VAR1].VAR8){
revert();
FUN4();
FUN5(msg.sender, VAR2);
FUN6(VAR1, VAR2);
assert(VAR1.call.value(0)(bytes4(FUN7(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2);
return true;
} else {
return FUN8(msg.sender, VAR1, VAR2, VAR3);
0
---------------------------------
14458.sol
function transfer(address VAR1, uint256 VAR2, bytes VAR3, string VAR4) public VAR5 FUN1(VAR1) returns (bool VAR6){
require(VAR1 != address(0));
if(FUN2(VAR1)) {
if(VAR7[msg.sender].VAR8 < VAR2){
revert();
if(FUN3(VAR7[VAR1].VAR8, VAR2) < VAR7[VAR1].VAR8){
revert();
FUN4();
FUN5(msg.sender, VAR2);
FUN6(VAR1, VAR2);
assert(VAR1.call.value(0)(bytes4(FUN7(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2, VAR3);
Transfer(msg.sender, VAR1, VAR2);
return true;
} else {
return FUN8(msg.sender, VAR1, VAR2, VAR3);
0
---------------------------------
30101.sol
function FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);
VAR3[VAR1] = 0;
FUN2(VAR1);
require(VAR1.call.value(VAR2)());
function FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
30101.sol
function FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);
VAR3[VAR1] = 0;
FUN2(VAR1);
require(VAR1.call.value(VAR2)());
function FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
30101.sol
function FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);
VAR3[VAR1] = 0;
FUN2(VAR1);
require(VAR1.call.value(VAR2)());
function FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
30101.sol
function FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);
VAR3[VAR1] = 0;
FUN2(VAR1);
require(VAR1.call.value(VAR2)());
function FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
9600.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9600.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
9600.sol
function FUN1(address VAR1, bytes VAR2, uint VAR3) internal {
require(VAR4 == false, "");
VAR4 = true;
require(VAR1.call.value(VAR3)(VAR2), "");
VAR4 = false;
contract payoutAllC is VAR5 {
address private VAR6;
event FUN2(address VAR7, uint value);
constructor(address VAR8) public {
assert(VAR8 != address(0));
VAR6 = VAR8;
function FUN3(address VAR1, uint VAR3) internal {
FUN1(VAR1, "", VAR3);
0
---------------------------------
40425.sol
function FUN1() public FUN2()  FUN3() {
if (VAR1 > 0) {
uint256 VAR2 = VAR1;
VAR1 = 0;
if (msg.sender.FUN4(VAR2)) {
FUN5(VAR2);
}  else if (msg.sender.call.value(VAR2)())  {
FUN5(VAR2);
}  else {
VAR1 = VAR2;
function FUN6(uint256 VAR3) public FUN7()  FUN3()  returns (bool) {
bool VAR4 = false;
uint32 VAR5 = VAR6[msg.sender].VAR7;
if (VAR3 > 0 && VAR8[VAR5].VAR9 >= VAR3)  {
VAR8[VAR5].VAR9 -= VAR3;
if (msg.sender.FUN4(VAR3))   {
VAR4 = true;
else if (msg.sender.call.value(VAR3)()) {
VAR4 = true;
}  else {
VAR8[VAR5].VAR9 += VAR3;
if (VAR4)  {
FUN8(VAR5, VAR3);
return true;
}  else {
FUN9(VAR5, VAR3);
return false;
function FUN10() public FUN7()  FUN3()  returns (bool)  {
bool VAR4 = false;
uint32 VAR5 = VAR6[msg.sender].VAR7;
uint256 VAR10 = 0;
if (VAR8[VAR5].VAR9 > 0)   {
VAR10 = VAR8[VAR5].VAR9;
VAR8[VAR5].VAR9 = 0;
if (msg.sender.FUN4(VAR10))   {
VAR4 = true;
}else
if  (msg.sender.call.value(VAR10)())  {
VAR4 = true;
} else {
VAR8[VAR5].VAR9 = VAR10;
if (VAR4)  {
FUN8(VAR5, VAR10);
return true;
}  else {
FUN9(VAR5, VAR10);
return false;
function FUN11(uint256 VAR3, address VAR11) public  FUN7()  FUN3()  returns (bool) {
bool VAR12 = false;
uint32 VAR5 = VAR6[msg.sender].VAR7;
if (VAR3 > 0 && VAR8[VAR5].VAR9 >= VAR3)  {
VAR8[VAR5].VAR9 -= VAR3;
if (VAR11.FUN4(VAR3))  {
VAR12 = true;
} else if (VAR11.call.value(VAR3)())      {
VAR12 = true;
} else {
VAR8[VAR5].VAR9 += VAR3;
if (VAR12)  {
FUN12(VAR5, VAR3, VAR11);
return true;
} else {
FUN13(VAR5, VAR3, VAR11);
return false;
0
---------------------------------
40425.sol
function FUN1() public FUN2()  FUN3() {
if (VAR1 > 0) {
uint256 VAR2 = VAR1;
VAR1 = 0;
if (msg.sender.FUN4(VAR2)) {
FUN5(VAR2);
}  else if (msg.sender.call.value(VAR2)())  {
FUN5(VAR2);
}  else {
VAR1 = VAR2;
function FUN6(uint256 VAR3) public FUN7()  FUN3()  returns (bool) {
bool VAR4 = false;
uint32 VAR5 = VAR6[msg.sender].VAR7;
if (VAR3 > 0 && VAR8[VAR5].VAR9 >= VAR3)  {
VAR8[VAR5].VAR9 -= VAR3;
if (msg.sender.FUN4(VAR3))   {
VAR4 = true;
else if (msg.sender.call.value(VAR3)()) {
VAR4 = true;
}  else {
VAR8[VAR5].VAR9 += VAR3;
if (VAR4)  {
FUN8(VAR5, VAR3);
return true;
}  else {
FUN9(VAR5, VAR3);
return false;
function FUN10() public FUN7()  FUN3()  returns (bool)  {
bool VAR4 = false;
uint32 VAR5 = VAR6[msg.sender].VAR7;
uint256 VAR10 = 0;
if (VAR8[VAR5].VAR9 > 0)   {
VAR10 = VAR8[VAR5].VAR9;
VAR8[VAR5].VAR9 = 0;
if (msg.sender.FUN4(VAR10))   {
VAR4 = true;
}else
if  (msg.sender.call.value(VAR10)())  {
VAR4 = true;
} else {
VAR8[VAR5].VAR9 = VAR10;
if (VAR4)  {
FUN8(VAR5, VAR10);
return true;
}  else {
FUN9(VAR5, VAR10);
return false;
function FUN11(uint256 VAR3, address VAR11) public  FUN7()  FUN3()  returns (bool) {
bool VAR12 = false;
uint32 VAR5 = VAR6[msg.sender].VAR7;
if (VAR3 > 0 && VAR8[VAR5].VAR9 >= VAR3)  {
VAR8[VAR5].VAR9 -= VAR3;
if (VAR11.FUN4(VAR3))  {
VAR12 = true;
} else if (VAR11.call.value(VAR3)())      {
VAR12 = true;
} else {
VAR8[VAR5].VAR9 += VAR3;
if (VAR12)  {
FUN12(VAR5, VAR3, VAR11);
return true;
} else {
FUN13(VAR5, VAR3, VAR11);
return false;
0
1710.sol
function FUN1(address VAR1) internal {
require(VAR2.call.value(msg.value)());
uint256 VAR3 = VAR4.FUN2(address(this));
uint256 VAR5 = address(this).VAR6;
if (VAR3 > 0) {
require(VAR4.transfer(VAR1, VAR3));    }
if (VAR5 > 0) {
require(VAR1.FUN3(VAR5));
function FUN4 (address VAR1) public payable {
FUN1(VAR1);
function FUN4 () public payable {
FUN1(msg.sender);
function () external payable {
FUN1(msg.sender);
0
---------------------------------
1710.sol
function FUN1(address VAR1) internal {
require(VAR2.call.value(msg.value)());
uint256 VAR3 = VAR4.FUN2(address(this));
uint256 VAR5 = address(this).VAR6;
if (VAR3 > 0) {
require(VAR4.transfer(VAR1, VAR3));    }
if (VAR5 > 0) {
require(VAR1.FUN3(VAR5));
function FUN4 (address VAR1) public payable {
FUN1(VAR1);
function FUN4 () public payable {
FUN1(msg.sender);
function () external payable {
FUN1(msg.sender);
0
---------------------------------
40038.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external onlyowner returns (bytes32 VAR4) {
if (VAR1 == address(VAR5)) throw;
if (FUN2(VAR2)) {
FUN3(msg.sender, VAR2, VAR1, VAR3);
if(!VAR1.call.value(VAR2)(VAR3))
return 0;
VAR4 = FUN4(msg.VAR6, VAR7.VAR8);
if (!FUN5(VAR4) && VAR9[VAR4].VAR10 == 0) {
VAR9[VAR4].VAR10 = VAR1;
VAR9[VAR4].value = VAR2;
VAR9[VAR4].VAR6 = VAR3;
FUN6(VAR4, msg.sender, VAR2, VAR1, VAR3);
function FUN5(bytes32 VAR11) FUN7(VAR11) returns (bool) {
if (VAR9[VAR11].VAR10 != 0) {
if(!VAR9[VAR11].VAR10.call.value(VAR9[VAR11].value)(VAR9[VAR11].VAR6))
FUN8(msg.sender, VAR11, VAR9[VAR11].value, VAR9[VAR11].VAR10, VAR9[VAR11].VAR6);
delete VAR9[VAR11];
return true;
1
---------------------------------
40038.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external onlyowner returns (bytes32 VAR4) {
if (VAR1 == address(VAR5)) throw;
if (FUN2(VAR2)) {
FUN3(msg.sender, VAR2, VAR1, VAR3);
if(!VAR1.call.value(VAR2)(VAR3))
return 0;
VAR4 = FUN4(msg.VAR6, VAR7.VAR8);
if (!FUN5(VAR4) && VAR9[VAR4].VAR10 == 0) {
VAR9[VAR4].VAR10 = VAR1;
VAR9[VAR4].value = VAR2;
VAR9[VAR4].VAR6 = VAR3;
FUN6(VAR4, msg.sender, VAR2, VAR1, VAR3);
function FUN5(bytes32 VAR11) FUN7(VAR11) returns (bool) {
if (VAR9[VAR11].VAR10 != 0) {
if(!VAR9[VAR11].VAR10.call.value(VAR9[VAR11].value)(VAR9[VAR11].VAR6))
FUN8(msg.sender, VAR11, VAR9[VAR11].value, VAR9[VAR11].VAR10, VAR9[VAR11].VAR6);
delete VAR9[VAR11];
return true;
1
---------------------------------
40038.sol
function FUN1(address VAR1, uint VAR2, bytes VAR3) external onlyowner returns (bytes32 VAR4) {
if (VAR1 == address(VAR5)) throw;
if (FUN2(VAR2)) {
FUN3(msg.sender, VAR2, VAR1, VAR3);
if(!VAR1.call.value(VAR2)(VAR3))
return 0;
VAR4 = FUN4(msg.VAR6, VAR7.VAR8);
if (!FUN5(VAR4) && VAR9[VAR4].VAR10 == 0) {
VAR9[VAR4].VAR10 = VAR1;
VAR9[VAR4].value = VAR2;
VAR9[VAR4].VAR6 = VAR3;
FUN6(VAR4, msg.sender, VAR2, VAR1, VAR3);
function FUN5(bytes32 VAR11) FUN7(VAR11) returns (bool) {
if (VAR9[VAR11].VAR10 != 0) {
if(!VAR9[VAR11].VAR10.call.value(VAR9[VAR11].value)(VAR9[VAR11].VAR6))
FUN8(msg.sender, VAR11, VAR9[VAR11].value, VAR9[VAR11].VAR10, VAR9[VAR11].VAR6);
delete VAR9[VAR11];
return true;
1
---------------------------------
9221.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
9221.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
9221.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
9221.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
3255.sol
function FUN1(VAR1.EventReturns memory VAR2)
FUN2 (VAR1.VAR3)uint256 VAR4 = VAR5;
uint256 VAR6 = VAR7[VAR4].VAR8;
uint256 VAR9 = VAR7[VAR4].VAR10;
uint256 VAR11 = VAR7[VAR4].VAR12;
uint256 VAR13 = (VAR11.FUN3(48)) / 100;
uint256 VAR14 = (VAR11 / 50);
uint256 VAR15 = (VAR11.FUN3(VAR16[VAR9].VAR17)) / 100;
uint256 VAR18 = (VAR11.FUN3(VAR16[VAR9].VAR19)) / 100;
uint256 VAR20 = (((VAR11.FUN4(VAR13)).FUN4(VAR14)).FUN4(VAR15)).FUN4(VAR18);
uint256 VAR21 = (VAR15.FUN3(1000000000000000000)) / (VAR7[VAR4].VAR22);
uint256 VAR23 = VAR15.FUN4((VAR21.FUN3(VAR7[VAR4].VAR22)) / 1000000000000000000);
if (VAR23 > 0)VAR15 = VAR15.FUN4(VAR23);
VAR20 = VAR20.FUN5(VAR23);
VAR24[VAR6].VAR25 = VAR13.FUN5(VAR24[VAR6].VAR25);
if (!address(VAR26).call.value(VAR14)(bytes4(FUN6(""))))VAR18 = VAR18.FUN5(VAR14);
VAR14 = 0;VAR7[VAR4].VAR27 = VAR21.FUN5(VAR7[VAR4].VAR27);
VAR2.VAR28 = VAR2.VAR28 + (VAR7[VAR4].VAR29 * 1000000);
VAR2.VAR30 = VAR2.VAR30 + (VAR6 * 100000000000000000000000000) + (VAR9 * 100000000000000000);
VAR2.VAR31 = VAR24[VAR6].VAR32;
VAR2.VAR33 = VAR24[VAR6].VAR34;
VAR2.VAR35 = VAR13;
VAR2.VAR36 = VAR15;
VAR2.VAR37 = 0;
VAR2.VAR38 = VAR20;
VAR5++;
VAR4++;
VAR7[VAR4].VAR39 = VAR40;
VAR7[VAR4].VAR29 = VAR40.FUN5(VAR41).FUN5(VAR42);
VAR7[VAR4].VAR12 = VAR20;
return(VAR2);
function FUN7(uint256 VAR4, uint256 VAR43, uint256 VAR44, uint256 VAR45, uint256 VAR46, VAR1.EventReturns memory VAR2)
FUN2(VAR1.VAR3)uint256 VAR14 = VAR44 / 50;
uint256 VAR18;
uint256 VAR47 = VAR44 / 10;
if (VAR45 != VAR43 && VAR24[VAR45].VAR34 != \'\') {
VAR24[VAR45].VAR48 = VAR47.FUN5(VAR24[VAR45].VAR48);
emit VAR49.FUN8(VAR45, VAR24[VAR45].VAR32, VAR24[VAR45].VAR34, VAR4, VAR43, VAR47, VAR40);
} else {
VAR14 = VAR14.FUN5(VAR47);
address(VAR26).call.value(VAR14)(bytes4(FUN6("")));
return(VAR2);
0
---------------------------------
3255.sol
function FUN1(VAR1.EventReturns memory VAR2)
FUN2 (VAR1.VAR3)uint256 VAR4 = VAR5;
uint256 VAR6 = VAR7[VAR4].VAR8;
uint256 VAR9 = VAR7[VAR4].VAR10;
uint256 VAR11 = VAR7[VAR4].VAR12;
uint256 VAR13 = (VAR11.FUN3(48)) / 100;
uint256 VAR14 = (VAR11 / 50);
uint256 VAR15 = (VAR11.FUN3(VAR16[VAR9].VAR17)) / 100;
uint256 VAR18 = (VAR11.FUN3(VAR16[VAR9].VAR19)) / 100;
uint256 VAR20 = (((VAR11.FUN4(VAR13)).FUN4(VAR14)).FUN4(VAR15)).FUN4(VAR18);
uint256 VAR21 = (VAR15.FUN3(1000000000000000000)) / (VAR7[VAR4].VAR22);
uint256 VAR23 = VAR15.FUN4((VAR21.FUN3(VAR7[VAR4].VAR22)) / 1000000000000000000);
if (VAR23 > 0)VAR15 = VAR15.FUN4(VAR23);
VAR20 = VAR20.FUN5(VAR23);
VAR24[VAR6].VAR25 = VAR13.FUN5(VAR24[VAR6].VAR25);
if (!address(VAR26).call.value(VAR14)(bytes4(FUN6(""))))VAR18 = VAR18.FUN5(VAR14);
VAR14 = 0;VAR7[VAR4].VAR27 = VAR21.FUN5(VAR7[VAR4].VAR27);
VAR2.VAR28 = VAR2.VAR28 + (VAR7[VAR4].VAR29 * 1000000);
VAR2.VAR30 = VAR2.VAR30 + (VAR6 * 100000000000000000000000000) + (VAR9 * 100000000000000000);
VAR2.VAR31 = VAR24[VAR6].VAR32;
VAR2.VAR33 = VAR24[VAR6].VAR34;
VAR2.VAR35 = VAR13;
VAR2.VAR36 = VAR15;
VAR2.VAR37 = 0;
VAR2.VAR38 = VAR20;
VAR5++;
VAR4++;
VAR7[VAR4].VAR39 = VAR40;
VAR7[VAR4].VAR29 = VAR40.FUN5(VAR41).FUN5(VAR42);
VAR7[VAR4].VAR12 = VAR20;
return(VAR2);
function FUN7(uint256 VAR4, uint256 VAR43, uint256 VAR44, uint256 VAR45, uint256 VAR46, VAR1.EventReturns memory VAR2)
FUN2(VAR1.VAR3)uint256 VAR14 = VAR44 / 50;
uint256 VAR18;
uint256 VAR47 = VAR44 / 10;
if (VAR45 != VAR43 && VAR24[VAR45].VAR34 != \'\') {
VAR24[VAR45].VAR48 = VAR47.FUN5(VAR24[VAR45].VAR48);
emit VAR49.FUN8(VAR45, VAR24[VAR45].VAR32, VAR24[VAR45].VAR34, VAR4, VAR43, VAR47, VAR40);
} else {
VAR14 = VAR14.FUN5(VAR47);
address(VAR26).call.value(VAR14)(bytes4(FUN6("")));
return(VAR2);
0
---------------------------------
3255.sol
function FUN1(VAR1.EventReturns memory VAR2)
FUN2 (VAR1.VAR3)uint256 VAR4 = VAR5;
uint256 VAR6 = VAR7[VAR4].VAR8;
uint256 VAR9 = VAR7[VAR4].VAR10;
uint256 VAR11 = VAR7[VAR4].VAR12;
uint256 VAR13 = (VAR11.FUN3(48)) / 100;
uint256 VAR14 = (VAR11 / 50);
uint256 VAR15 = (VAR11.FUN3(VAR16[VAR9].VAR17)) / 100;
uint256 VAR18 = (VAR11.FUN3(VAR16[VAR9].VAR19)) / 100;
uint256 VAR20 = (((VAR11.FUN4(VAR13)).FUN4(VAR14)).FUN4(VAR15)).FUN4(VAR18);
uint256 VAR21 = (VAR15.FUN3(1000000000000000000)) / (VAR7[VAR4].VAR22);
uint256 VAR23 = VAR15.FUN4((VAR21.FUN3(VAR7[VAR4].VAR22)) / 1000000000000000000);
if (VAR23 > 0)VAR15 = VAR15.FUN4(VAR23);
VAR20 = VAR20.FUN5(VAR23);
VAR24[VAR6].VAR25 = VAR13.FUN5(VAR24[VAR6].VAR25);
if (!address(VAR26).call.value(VAR14)(bytes4(FUN6(""))))VAR18 = VAR18.FUN5(VAR14);
VAR14 = 0;VAR7[VAR4].VAR27 = VAR21.FUN5(VAR7[VAR4].VAR27);
VAR2.VAR28 = VAR2.VAR28 + (VAR7[VAR4].VAR29 * 1000000);
VAR2.VAR30 = VAR2.VAR30 + (VAR6 * 100000000000000000000000000) + (VAR9 * 100000000000000000);
VAR2.VAR31 = VAR24[VAR6].VAR32;
VAR2.VAR33 = VAR24[VAR6].VAR34;
VAR2.VAR35 = VAR13;
VAR2.VAR36 = VAR15;
VAR2.VAR37 = 0;
VAR2.VAR38 = VAR20;
VAR5++;
VAR4++;
VAR7[VAR4].VAR39 = VAR40;
VAR7[VAR4].VAR29 = VAR40.FUN5(VAR41).FUN5(VAR42);
VAR7[VAR4].VAR12 = VAR20;
return(VAR2);
function FUN7(uint256 VAR4, uint256 VAR43, uint256 VAR44, uint256 VAR45, uint256 VAR46, VAR1.EventReturns memory VAR2)
FUN2(VAR1.VAR3)uint256 VAR14 = VAR44 / 50;
uint256 VAR18;
uint256 VAR47 = VAR44 / 10;
if (VAR45 != VAR43 && VAR24[VAR45].VAR34 != \'\') {
VAR24[VAR45].VAR48 = VAR47.FUN5(VAR24[VAR45].VAR48);
emit VAR49.FUN8(VAR45, VAR24[VAR45].VAR32, VAR24[VAR45].VAR34, VAR4, VAR43, VAR47, VAR40);
} else {
VAR14 = VAR14.FUN5(VAR47);
address(VAR26).call.value(VAR14)(bytes4(FUN6("")));
return(VAR2);
0
---------------------------------
39705.sol
function FUN1() returns (bool) {
return VAR1.call.value(this.VAR2)();
function FUN2(address VAR3) private returns (bool) {
state VAR4 = FUN3();
if (VAR4 != VAR5.VAR6 && VAR4 != VAR5.VAR7) { throw; }
if (msg.value < VAR8) { throw; }
if (VAR9 == 0) { throw; }
VAR10 += msg.value;
VAR11[VAR3] += msg.value;
uint VAR12 = (msg.value * 100) / VAR9;
FUN4(VAR3, VAR13, VAR12, "", "");
return VAR1.call.value(this.VAR2)()；
0
---------------------------------
39664.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
39664.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
39664.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
12182.sol
function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
require(msg.sender == VAR3);
return VAR1.call.value(VAR2)();
function() public payable {}
contract Controller is VAR4, VAR5, VAR6 {
event FUN2(address VAR7);
event FUN3(address VAR7, address VAR8, uint256 VAR9);
event FUN4(address VAR10, address VAR7, address VAR8, uint256 VAR9);
event FUN5(address VAR11, address VAR12, address VAR13);
constructor() public {
FUN6(msg.sender);
function FUN7(address VAR14, uint256 value, bytes memory VAR15) public onlyOwner returns (bool) {
return VAR14.call.value(value)(VAR15);
function FUN8(VAR16[] VAR17) public onlyWorker returns (bool) {
uint256 VAR18 = VAR17.VAR19;
uint256 VAR20;
Wallet VAR21;
for (uint256 VAR22 = 0; VAR22 < VAR18; VAR22++) {
VAR21 = VAR17[VAR22];
VAR20 = VAR21.VAR20;
if (VAR21.FUN1(this, VAR20)) {
emit FUN3(VAR21, VAR23, VAR20);
VAR23.call.value(address(this).VAR20)();
return true;
0
---------------------------------
13952.sol
function FUN1(uint VAR1, string VAR2)
FUN2 (uint VAR3)
address VAR4 = msg.sender;
uint VAR5 = FUN3();
uint VAR6 = address(this).VAR7;
uint VAR8 = VAR6 > VAR5 ? VAR6 - VAR5 : 0;
if (VAR1 > VAR8) VAR1 = VAR8;
VAR1 = VAR9.FUN4(VAR4, VAR1);
VAR10 = VAR9.FUN5();
if (VAR1 == 0) return;bytes4 VAR11 = bytes4(FUN6(VAR2));
require(VAR4.call.value(VAR1)(VAR11));
emit FUN7(VAR12, VAR4, VAR1, VAR10);
return VAR1;
function FUN8()FUN2 (uint VAR13)int VAR14 = FUN9();
if (VAR14 <= 0) return;
VAR13 = uint(VAR14);
VAR15 += VAR13;
address VAR16 = FUN10();
require(VAR16.call.value(VAR13)());
emit FUN11(VAR12, VAR16, VAR13);
function FUN12(string VAR17, uint VAR18, bool VAR19)FUN13 (VAR19) require(msg.sender.call.value(VAR18)());
emit FUN14(VAR12, msg.sender, VAR18, VAR17);
function FUN15(address VAR20, uint VAR21)FUN13 (VAR21 > VAR22[VAR20] || VAR21 == 0) VAR21 = VAR22[VAR20];
if (VAR21 == 0) return;
VAR23.VAR24 -= FUN16(VAR21);
VAR22[VAR20] -= VAR21;
require(VAR20.call.value(VAR21)());
emit FUN17(VAR12, VAR20, VAR21);
---------------------------------
39973.sol
function FUN1(address VAR1, uint VAR2) internal returns(bool) {
return VAR1.call.value(VAR2)();
function FUN2(address VAR1, bytes VAR3) internal returns(bool, bool) {
uint VAR4 = msg.VAR5 + VAR6 + (VAR3.VAR7 * 50);
if (VAR1 == 0x0) {
return (false, FUN3());
if (!VAR1.call.value(msg.value)(VAR3)) {
return (false, FUN3());
return (true, FUN4(VAR4));
function FUN5(bytes VAR3) constant returns(bool, bool) {
return FUN2(VAR8[FUN6(VAR3[0], VAR3[1], VAR3[2], VAR3[3])], VAR3);
function FUN5(bytes VAR3) constant returns(bool, bool) {
return FUN2(VAR8[FUN6(VAR3[0], VAR3[1], VAR3[2], VAR3[3])], VAR3);
1
---------------------------------
39973.sol
function FUN1(address VAR1, uint VAR2) internal returns(bool) {
return VAR1.call.value(VAR2)();
function FUN2(address VAR1, bytes VAR3) internal returns(bool, bool) {
uint VAR4 = msg.VAR5 + VAR6 + (VAR3.VAR7 * 50);
if (VAR1 == 0x0) {
return (false, FUN3());
if (!VAR1.call.value(msg.value)(VAR3)) {
return (false, FUN3());
return (true, FUN4(VAR4));
function FUN5(bytes VAR3) constant returns(bool, bool) {
return FUN2(VAR8[FUN6(VAR3[0], VAR3[1], VAR3[2], VAR3[3])], VAR3);
function FUN5(bytes VAR3) constant returns(bool, bool) {
return FUN2(VAR8[FUN6(VAR3[0], VAR3[1], VAR3[2], VAR3[3])], VAR3);
1
---------------------------------
10715.sol
function FUN1(address VAR1,  uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
function FUN3(address VAR4, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR4 != address(this));
super.transfer(VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN4(address VAR5, address VAR4, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR4 != address(this));
super.FUN5(VAR5, VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN6(address VAR1,uint VAR6,bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN7(VAR1, VAR6);
require(VAR1.call.value(msg.value)(VAR3));
return true;
function FUN8(address VAR1, uint VAR7, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN9(VAR1, VAR7);
require(VAR1.call.value(msg.value)(VAR3));
return true;
contract AtripToken is VAR8 {
using SafeMath for uint256;
string public VAR9 = "";
string public VAR10 = "";
uint public VAR11 = 18;
address public VAR12 = 0x0;
1
---------------------------------
30460.sol
function FUN1() onlyOwner public {
require(VAR1 == VAR2.VAR3);
VAR1 = VAR2.VAR4;FUN2();
VAR5.call.value(this.VAR6)();
function FUN3() onlyOwner public {
require(this.VAR6 > 0);
VAR5.call.value(this.VAR6)();
contract FinalizableCrowdsale is VAR7, VAR8 {
using SafeMath for uint256;
bool public VAR9 = false;
event FUN4();
function FUN5(uint256 VAR10) internal {
if (FUN6() && VAR11.VAR6 > 0) {
VAR11.FUN3();
if (FUN6()) {
VAR5.call.value(VAR10)();
} else {
VAR11.VAR12.value(VAR10)(msg.sender);
0
---------------------------------
30460.sol
function FUN1() onlyOwner public {
require(VAR1 == VAR2.VAR3);
VAR1 = VAR2.VAR4;FUN2();
VAR5.call.value(this.VAR6)();
function FUN3() onlyOwner public {
require(this.VAR6 > 0);
VAR5.call.value(this.VAR6)();
contract FinalizableCrowdsale is VAR7, VAR8 {
using SafeMath for uint256;
bool public VAR9 = false;
event FUN4();
function FUN5(uint256 VAR10) internal {
if (FUN6() && VAR11.VAR6 > 0) {
VAR11.FUN3();
if (FUN6()) {
VAR5.call.value(VAR10)();
} else {
VAR11.VAR12.value(VAR10)(msg.sender);
0
---------------------------------
30460.sol
function FUN1() onlyOwner public {
require(VAR1 == VAR2.VAR3);
VAR1 = VAR2.VAR4;FUN2();
VAR5.call.value(this.VAR6)();
function FUN3() onlyOwner public {
require(this.VAR6 > 0);
VAR5.call.value(this.VAR6)();
contract FinalizableCrowdsale is VAR7, VAR8 {
using SafeMath for uint256;
bool public VAR9 = false;
event FUN4();
function FUN5(uint256 VAR10) internal {
if (FUN6() && VAR11.VAR6 > 0) {
VAR11.FUN3();
if (FUN6()) {
VAR5.call.value(VAR10)();
} else {
VAR11.VAR12.value(VAR10)(msg.sender);
0
---------------------------------
4679.sol
function FUN1(address VAR1) internal {
require( VAR2[VAR1] > 0, "" );
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2[VAR1]);
VAR4.FUN3(VAR1, VAR2[VAR1]);
VAR5 = VAR5.FUN2(VAR2[VAR1]);
VAR2[VAR1] = 0;
require( address(VAR4).call.value( VAR6[VAR1] )( bytes4( FUN4("") ) ) );
VAR6[VAR1] = 0;
function FUN5() onlyRC payable public returns(bool) {
require(VAR7.call.value(msg.value)(), "");
return true;
0
---------------------------------
4679.sol
function FUN1(address VAR1) internal {
require( VAR2[VAR1] > 0, "" );
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2[VAR1]);
VAR4.FUN3(VAR1, VAR2[VAR1]);
VAR5 = VAR5.FUN2(VAR2[VAR1]);
VAR2[VAR1] = 0;
require( address(VAR4).call.value( VAR6[VAR1] )( bytes4( FUN4("") ) ) );
VAR6[VAR1] = 0;
function FUN5() onlyRC payable public returns(bool) {
require(VAR7.call.value(msg.value)(), "");
return true;
0
---------------------------------
4679.sol
function FUN1(address VAR1) internal {
require( VAR2[VAR1] > 0, "" );
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2[VAR1]);
VAR4.FUN3(VAR1, VAR2[VAR1]);
VAR5 = VAR5.FUN2(VAR2[VAR1]);
VAR2[VAR1] = 0;
require( address(VAR4).call.value( VAR6[VAR1] )( bytes4( FUN4("") ) ) );
VAR6[VAR1] = 0;
function FUN5() onlyRC payable public returns(bool) {
require(VAR7.call.value(msg.value)(), "");
return true;
0
---------------------------------
4679.sol
function FUN1(address VAR1) internal {
require( VAR2[VAR1] > 0, "" );
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2[VAR1]);
VAR4.FUN3(VAR1, VAR2[VAR1]);
VAR5 = VAR5.FUN2(VAR2[VAR1]);
VAR2[VAR1] = 0;
require( address(VAR4).call.value( VAR6[VAR1] )( bytes4( FUN4("") ) ) );
VAR6[VAR1] = 0;
function FUN5() onlyRC payable public returns(bool) {
require(VAR7.call.value(msg.value)(), "");
return true;
0
---------------------------------
4679.sol
function FUN1(address VAR1) internal {
require( VAR2[VAR1] > 0, "" );
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2[VAR1]);
VAR4.FUN3(VAR1, VAR2[VAR1]);
VAR5 = VAR5.FUN2(VAR2[VAR1]);
VAR2[VAR1] = 0;
require( address(VAR4).call.value( VAR6[VAR1] )( bytes4( FUN4("") ) ) );
VAR6[VAR1] = 0;
function FUN5() onlyRC payable public returns(bool) {
require(VAR7.call.value(msg.value)(), "");
return true;
0
---------------------------------
4679.sol
function FUN1(address VAR1) internal {
require( VAR2[VAR1] > 0, "" );
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2[VAR1]);
VAR4.FUN3(VAR1, VAR2[VAR1]);
VAR5 = VAR5.FUN2(VAR2[VAR1]);
VAR2[VAR1] = 0;
require( address(VAR4).call.value( VAR6[VAR1] )( bytes4( FUN4("") ) ) );
VAR6[VAR1] = 0;
function FUN5() onlyRC payable public returns(bool) {
require(VAR7.call.value(msg.value)(), "");
return true;
0
---------------------------------
4679.sol
function FUN1(address VAR1) internal {
require( VAR2[VAR1] > 0, "" );
VAR3[VAR1] = VAR3[VAR1].FUN2(VAR2[VAR1]);
VAR4.FUN3(VAR1, VAR2[VAR1]);
VAR5 = VAR5.FUN2(VAR2[VAR1]);
VAR2[VAR1] = 0;
require( address(VAR4).call.value( VAR6[VAR1] )( bytes4( FUN4("") ) ) );
VAR6[VAR1] = 0;
function FUN5() onlyRC payable public returns(bool) {
require(VAR7.call.value(msg.value)(), "");
return true;
0
---------------------------------
40340.sol
function FUN1(uint VAR1) {
if (VAR2[msg.sender]>0) {
if (int(VAR1)<=FUN2(msg.sender, true) && int(VAR1)>0) {
VAR3[VAR2[msg.sender]].VAR4 -= int(VAR1);
msg.sender.call.value(VAR1)();
FUN3(msg.sender, VAR1, VAR3[VAR2[msg.sender]].VAR4);
function FUN4(uint VAR5, uint8 VAR6, bytes32 VAR7, bytes32 VAR8, bytes32 value) {
if (VAR9 == false) {
if (FUN5(FUN6(VAR10, value), VAR6, VAR7, VAR8) == VAR11) {
uint VAR12 = VAR13;
if (VAR5==0) {
VAR5 = 1;
} else {
VAR12 = VAR5;
for (VAR5=VAR5; VAR5<=VAR12; VAR5++) {
if (VAR14[VAR3[VAR5].VAR15].VAR9 == false) {
int VAR16 = VAR14[VAR3[VAR5].VAR15].VAR17 / 1000000000000000000;
for (uint VAR18=0; VAR18<VAR19; VAR18++) {
int VAR20 = FUN7(VAR21[VAR18], uint(value), VAR22);
VAR16 += VAR20 * VAR14[VAR3[VAR5].VAR15].VAR14[VAR18] / 1000000000000000000;
VAR14[VAR3[VAR5].VAR15].VAR9 = true;
uint VAR23 = uint(VAR3[VAR5].VAR4 + VAR16);
VAR3[VAR5].VAR4 = 0;
if (VAR14[VAR3[VAR5].VAR15].VAR24==true) {
VAR25++;
VAR3[VAR5].VAR15.call.value(VAR23)();
FUN8(msg.sender, VAR3[VAR5].VAR15);
if (VAR25 == VAR26) {
VAR9 = true;
0
---------------------------------
2387_1.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
2387_1.sol
function FUN1(address VAR1,  uint256 value,  bytes VAR2) public payable liquid returns (bool) {
require(VAR1 != address(this) && VAR2.VAR3 >= 68 &&   transfer(VAR1, value));
VAR4 {
FUN2(FUN3(VAR2, 36), value)
FUN2(FUN3(VAR2, 68), VAR5)
require(VAR1.call.value(msg.value)(VAR2));
return true;
1
---------------------------------
21697_1.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697_1.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
21697_1.sol
function FUN1() public payable  {
if(msg.value > 1 VAR1)  {
msg.sender.call.value(this.VAR2);
1
---------------------------------
24007_1.sol
function FUN1() public payable {
if(VAR1[msg.sender]!=0 && VAR1[msg.sender]<VAR2) {
msg.sender.call.value(0.3 VAR3);
VAR1[msg.sender] = 0;
1
---------------------------------
23803_1.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
23803_1.sol
function () payable {
if (!VAR1.call.value(msg.value)()) revert();
0
---------------------------------
39326_1.sol
function FUN1( uint256 VAR1, bytes   VAR2) onlyMembers {
Proposal VAR3 = VAR4[VAR1];
if (VAR5 < VAR3.VAR6 || VAR3.VAR7 || VAR3.VAR8 != FUN2(VAR3.VAR9, VAR3.VAR10, VAR2) || VAR3.VAR11 < VAR12)  throw;
if (VAR3.VAR13 > VAR14) {
VAR3.VAR7 = true;
if (!VAR3.VAR9.call.value(VAR3.VAR10)(VAR2))  throw;
VAR3.VAR15 = true;
} else {
VAR3.VAR15 = false;
FUN3(VAR1, VAR3.VAR11, VAR3.VAR15);
library VAR16 {
0
---------------------------------
30101_1.sol
function FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);
VAR3[VAR1] = 0;
FUN2(VAR1);
require(VAR1.call.value(VAR2)());
function FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
30101_1.sol
function FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);
VAR3[VAR1] = 0;
FUN2(VAR1);
require(VAR1.call.value(VAR2)());
function FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
9221_1.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
9221_1.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
9221_1.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
9221_1.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
9221_1.sol
function FUN1() payable {
if ((FUN2()%2==1) && (msg.value == 1 VAR1) && (!VAR2))  {
if (!msg.sender.call.value(2 VAR1)())
throw;
function FUN3(uint VAR3) {
if (VAR4==msg.sender)  {
if (!msg.sender.call.value( VAR3 * (1 VAR1))())
throw;
0
---------------------------------
39705_1.sol
function FUN1() returns (bool) {
return VAR1.call.value(this.VAR2)();
function FUN2(address VAR3) private returns (bool) {
state VAR4 = FUN3();
if (VAR4 != VAR5.VAR6 && VAR4 != VAR5.VAR7) { throw; }
if (msg.value < VAR8) { throw; }
if (VAR9 == 0) { throw; }
VAR10 += msg.value;
VAR11[VAR3] += msg.value;
uint VAR12 = (msg.value * 100) / VAR9;
FUN4(VAR3, VAR13, VAR12, "", "");
return VAR1.call.value(this.VAR2)();
0
---------------------------------
39705_1.sol
function FUN1() returns (bool) {
return VAR1.call.value(this.VAR2)();
function FUN2(address VAR3) private returns (bool) {
state VAR4 = FUN3();
if (VAR4 != VAR5.VAR6 && VAR4 != VAR5.VAR7) { throw; }
if (msg.value < VAR8) { throw; }
if (VAR9 == 0) { throw; }
VAR10 += msg.value;
VAR11[VAR3] += msg.value;
uint VAR12 = (msg.value * 100) / VAR9;
FUN4(VAR3, VAR13, VAR12, "", "");
return VAR1.call.value(this.VAR2)();
0
---------------------------------
39705_1.sol
function FUN1() returns (bool) {
return VAR1.call.value(this.VAR2)();
function FUN2(address VAR3) private returns (bool) {
state VAR4 = FUN3();
if (VAR4 != VAR5.VAR6 && VAR4 != VAR5.VAR7) { throw; }
if (msg.value < VAR8) { throw; }
if (VAR9 == 0) { throw; }
VAR10 += msg.value;
VAR11[VAR3] += msg.value;
uint VAR12 = (msg.value * 100) / VAR9;
FUN4(VAR3, VAR13, VAR12, "", "");
return VAR1.call.value(this.VAR2)();
0
---------------------------------
39664_1.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
39664_1.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
39664_1.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
39664_1.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
39664_1.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
39664_1.sol
function FUN1() FUN2(VAR1) {
FUN3();
if (VAR2 > VAR3) {
if (!VAR1.call.value(VAR2 - VAR3)()) throw;
FUN4(VAR4);
function FUN5() onlyOwner {
if (VAR5 > VAR6) throw;
if (VAR2 <= VAR3) throw;
uint256 VAR7 = VAR2 - VAR3;
if (!VAR1.call.value(VAR7)()) throw;
VAR2 -= VAR7;
VAR8 = VAR6 + VAR9;
VAR5 = VAR8 + VAR9;
0
---------------------------------
12182_1.sol
function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
require(msg.sender == VAR3);
return VAR1.call.value(VAR2)();
function() public payable {}
contract Controller is VAR4, VAR5, VAR6 {
event FUN2(address VAR7);
event FUN3(address VAR7, address VAR8, uint256 VAR9);
event FUN4(address VAR10, address VAR7, address VAR8, uint256 VAR9);
event FUN5(address VAR11, address VAR12, address VAR13);
constructor() public {
FUN6(msg.sender);
function FUN7(address VAR14, uint256 value, bytes memory VAR15) public onlyOwner returns (bool) {
return VAR14.call.value(value)(VAR15);
function FUN8(VAR16[] VAR17) public onlyWorker returns (bool) {
uint256 VAR18 = VAR17.VAR19;
uint256 VAR20;Wallet VAR21;
for (uint256 VAR22 = 0; VAR22 < VAR18; VAR22++) {
VAR21 = VAR17[VAR22];
VAR20 = VAR21.VAR20;
if (VAR21.FUN1(this, VAR20)) {
emit FUN3(VAR21, VAR23, VAR20);
VAR23.call.value(address(this).VAR20)();
return true;
0
---------------------------------
12182_1.sol
function FUN1(address VAR1, uint256 VAR2) public returns (bool) {
require(msg.sender == VAR3);
return VAR1.call.value(VAR2)();
function() public payable {}
contract Controller is VAR4, VAR5, VAR6 {
event FUN2(address VAR7);
event FUN3(address VAR7, address VAR8, uint256 VAR9);
event FUN4(address VAR10, address VAR7, address VAR8, uint256 VAR9);
event FUN5(address VAR11, address VAR12, address VAR13);
constructor() public {
FUN6(msg.sender);
function FUN7(address VAR14, uint256 value, bytes memory VAR15) public onlyOwner returns (bool) {
return VAR14.call.value(value)(VAR15);
function FUN8(VAR16[] VAR17) public onlyWorker returns (bool) {
uint256 VAR18 = VAR17.VAR19;
uint256 VAR20;Wallet VAR21;
for (uint256 VAR22 = 0; VAR22 < VAR18; VAR22++) {
VAR21 = VAR17[VAR22];
VAR20 = VAR21.VAR20;
if (VAR21.FUN1(this, VAR20)) {
emit FUN3(VAR21, VAR23, VAR20);
VAR23.call.value(address(this).VAR20)();
return true;
0
---------------------------------
32559_1.sol
function transfer(address VAR1, uint256 VAR2, bytes VAR3, string VAR4) FUN1(4 * 32) public returns (bool VAR5) {
if(FUN2(VAR1)) {
require(FUN3(FUN4()).FUN5(msg.sender) >= VAR2);
FUN3(FUN4()).transfer(msg.sender, VAR1, VAR2);
ContractReceiver VAR6 = FUN6(VAR1);
require(VAR6.call.value(0)(bytes4(FUN7(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2);
Transfer(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
32559_1.sol
function transfer(address VAR1, uint256 VAR2, bytes VAR3, string VAR4) FUN1(4 * 32) public returns (bool VAR5) {
if(FUN2(VAR1)) {
require(FUN3(FUN4()).FUN5(msg.sender) >= VAR2);
FUN3(FUN4()).transfer(msg.sender, VAR1, VAR2);
ContractReceiver VAR6 = FUN6(VAR1);
require(VAR6.call.value(0)(bytes4(FUN7(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2);
Transfer(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
35617_1.sol
function FUN1(address VAR1) duringCrowdSale payable {
require(!VAR2);
uint VAR3 = FUN2(msg.value, FUN3(VAR4.VAR5));
require(FUN4(VAR6,VAR3)<=VAR7 );
VAR8[VAR1] = FUN4(VAR8[VAR1], VAR3);
VAR9 = FUN4(VAR9, VAR3);
VAR6 = FUN4(VAR6, VAR3);
VAR10 = FUN4(VAR10, msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN5(VAR1, msg.value, VAR3);
function FUN6() payable {
FUN1(msg.sender);
function() payable {
FUN1(msg.sender);
function FUN6() payable {
FUN1(msg.sender);
function() payable {
FUN1(msg.sender);
0
---------------------------------
22805_1.sol
function FUN1(address VAR1, uint VAR2, uint VAR3) returns (bool VAR4) {
VAR5[msg.sender] = FUN2(VAR5[msg.sender], VAR2);
VAR5[VAR1] = FUN3(VAR5[VAR1], VAR2);
if (!VAR1.call.value(VAR3)()) revert();
FUN4(VAR1, VAR2, VAR3);
return true;
0
---------------------------------
22805_1.sol
function FUN1(address VAR1, uint VAR2, uint VAR3) returns (bool VAR4) {
VAR5[msg.sender] = FUN2(VAR5[msg.sender], VAR2);
VAR5[VAR1] = FUN3(VAR5[VAR1], VAR2);
if (!VAR1.call.value(VAR3)()) revert();
FUN4(VAR1, VAR2, VAR3);
return true;
0
---------------------------------
22805_1.sol
function FUN1(address VAR1, uint VAR2, uint VAR3) returns (bool VAR4) {
VAR5[msg.sender] = FUN2(VAR5[msg.sender], VAR2);
VAR5[VAR1] = FUN3(VAR5[VAR1], VAR2);
if (!VAR1.call.value(VAR3)()) revert();
FUN4(VAR1, VAR2, VAR3);
return true;
0
---------------------------------
Reentrance_exploit_1.sol
function FUN1(address VAR1) public payable{
VAR2 = VAR1 ;
require(VAR2.call.value(msg.value)(bytes4(FUN2(""))));
1
---------------------------------
Reentrance_exploit_1.sol
function FUN1(address VAR1) public payable{
VAR2 = VAR1 ;
require(VAR2.call.value(msg.value)(bytes4(FUN2(""))));
1
---------------------------------
 347.sol
FUN1() internal {
bool VAR1 = VAR2.call.value(msg.value).FUN2(VAR3)();
emit FUN3 (msg.sender, VAR2, msg.value, VAR1);
0
---------------------------------
347.sol
FUN1() internal {
bool VAR1 = VAR2.call.value(msg.value).FUN2(VAR3)();
emit FUN3 (msg.sender, VAR2, msg.value, VAR1);
0
---------------------------------
347.sol
FUN1() internal {
bool VAR1 = VAR2.call.value(msg.value).FUN2(VAR3)();
emit FUN3 (msg.sender, VAR2, msg.value, VAR1);
0
---------------------------------
347.sol
FUN1() internal {
bool VAR1 = VAR2.call.value(msg.value).FUN2(VAR3)();
emit FUN3 (msg.sender, VAR2, msg.value, VAR1);
0
---------------------------------
347.sol
FUN1() internal {
bool VAR1 = VAR2.call.value(msg.value).FUN2(VAR3)();
emit FUN3 (msg.sender, VAR2, msg.value, VAR1);
0
---------------------------------
347.sol
FUN1() internal {
bool VAR1 = VAR2.call.value(msg.value).FUN2(VAR3)();
emit FUN3 (msg.sender, VAR2, msg.value, VAR1);
0
---------------------------------
774.sol
FUN1(uint256 VAR1, uint256 VAR2, uint256 VAR3, VAR4.EventReturns memory VAR5) private returns(VAR4.VAR6) {
uint256 VAR7 = VAR2 * 5 / 100;
uint256 VAR8 = VAR2 * 10 / 100;
if (VAR3 != VAR1 && VAR9[VAR3].VAR10 != \'\') {
VAR9[VAR3].VAR11 = VAR8.FUN2(VAR9[VAR3].VAR11);
emit VAR12.FUN3(VAR3, VAR9[VAR3].VAR13, VAR9[VAR3].VAR10, VAR1, VAR8, VAR14);
} else {
VAR7 += VAR8;
if (!address(VAR15).call.value(VAR7)(bytes4(FUN4("")))){ 
}
return(VAR5);
function FUN5(
uint256 VAR16, uint256 VAR1, uint256 VAR2, uint256 VAR3, VAR4.EventReturns memory VAR5)  private  {
if (VAR17[VAR1][VAR16].VAR18 == 0)VAR5 = FUN6(VAR1, VAR5);
if (VAR19[VAR16].VAR20 < 100000000000000000000 && VAR17[VAR1][VAR16].VAR20.FUN2(VAR2) > 10000000000000000000)  {
uint256 VAR21 = (10000000000000000000).FUN7(VAR17[VAR1][VAR16].VAR20);
uint256 VAR22 = VAR2.FUN7(VAR21);
VAR9[VAR1].VAR23 = VAR9[VAR1].VAR23.FUN2(VAR22);
VAR2 = VAR21;
if (VAR2 > 1000000000)  {
uint256 VAR24 = (VAR19[VAR16].VAR20).FUN8(VAR2);if (VAR24 >= 1000000000000000000){
FUN9(VAR24, VAR16);
if (VAR19[VAR16].VAR25 != VAR1)VAR19[VAR16].VAR25 = VAR1;
VAR5.VAR26 = VAR5.VAR26 + 100;
if (VAR2 >= 100000000000000000)  {
VAR27++;if (FUN10() == true)  {
uint256 VAR28;
if (VAR2 >= 10000000000000000000) {
VAR28 = ((VAR29).FUN11(75)) / 100;
VAR9[VAR1].VAR30 = (VAR9[VAR1].VAR30).FUN2(VAR28);VAR29 = (VAR29).FUN7(VAR28);
VAR5.VAR26 += 300000000000000000000000000000000;
} else if (VAR2 >= 1000000000000000000 && VAR2 < 10000000000000000000) {
VAR28 = ((VAR29).FUN11(50)) / 100;
VAR9[VAR1].VAR30 = (VAR9[VAR1].VAR30).FUN2(VAR28);VAR29 = (VAR29).FUN7(VAR28);
VAR5.VAR26 += 200000000000000000000000000000000;
} else if (VAR2 >= 100000000000000000 && VAR2 < 1000000000000000000) {
VAR28 = ((VAR29).FUN11(25)) / 100;
VAR9[VAR1].VAR30 = (VAR9[VAR1].VAR30).FUN2(VAR28);
VAR29 = (VAR29).FUN7(VAR28);
VAR5.VAR26 += 100000000000000000000000000000000;
VAR5.VAR26 += 10000000000000000000000000000000;
VAR5.VAR26 += VAR28 * 1000000000000000000000000000000000;
VAR27 = 0;
VAR5.VAR26 = VAR5.VAR26 + (VAR27 * 1000);
VAR17[VAR1][VAR16].VAR18 = VAR24.FUN2(VAR17[VAR1][VAR16].VAR18);
VAR17[VAR1][VAR16].VAR20 = VAR2.FUN2(VAR17[VAR1][VAR16].VAR20);
VAR19[VAR16].VAR18 = VAR24.FUN2(VAR19[VAR16].VAR18);
VAR19[VAR16].VAR20 = VAR2.FUN2(VAR19[VAR16].VAR20);
VAR5 = FUN1(VAR1, VAR2, VAR3, VAR5);
VAR5 = FUN12(VAR16, VAR1, VAR2, VAR24, VAR5);
FUN13(VAR1, VAR2, VAR24, VAR5);
VAR31[VAR1] = VAR17[VAR1][VAR16];
VAR32 = VAR19[VAR16];
0
---------------------------------
1403.sol
FUN1( address VAR1,   uint value,  bytes VAR2, string VAR3 ) public returns (bool VAR4)  {
FUN2( msg.sender, VAR1, value, VAR2 );
if ( FUN3(VAR1) ) {
ContractReceiver VAR5 = FUN4( VAR1 );
require(address(VAR5).call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2) );
return true;
function FUN1(address VAR1, uint256 value) public returns (bool VAR4) {
bytes memory VAR6;
FUN3( msg.sender, VAR1, value, VAR6 );
return true;
function FUN6( address VAR7, address VAR1, uint256 value ) public returns (bool VAR4) {
require( value <= VAR8[VAR7][msg.sender] );
VAR8[VAR7][msg.sender] -= value;bytes memory VAR6;
FUN2( VAR7, VAR1, value, VAR6 );
return true;
FUN1( address VAR1, uint value, bytes VAR2 ) public returns (bool VAR4) {
if (FUN3(VAR1)) {
return FUN7( VAR1, value, VAR2 );
FUN2(msg.sender, VAR1, value, VAR2 );
return true;
FUN7( address VAR1, uint value, bytes VAR2 ) private returns (bool VAR4) {
FUN2(msg.sender, VAR1, value, VAR2 );
ContractReceiver VAR5 = FUN4(VAR1);
VAR5.FUN8( msg.sender, value, VAR2 );
return true;
1
---------------------------------
1403.sol
FUN1( address VAR1,   uint value,  bytes VAR2, string VAR3 ) public returns (bool VAR4)  {
FUN2( msg.sender, VAR1, value, VAR2 );
if ( FUN3(VAR1) ) {
ContractReceiver VAR5 = FUN4( VAR1 );
require(address(VAR5).call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2) );
return true;
function FUN1(address VAR1, uint256 value) public returns (bool VAR4) {
bytes memory VAR6;
FUN3( msg.sender, VAR1, value, VAR6 );
return true;
function FUN6( address VAR7, address VAR1, uint256 value ) public returns (bool VAR4) {
require( value <= VAR8[VAR7][msg.sender] );
VAR8[VAR7][msg.sender] -= value;bytes memory VAR6;
FUN2( VAR7, VAR1, value, VAR6 );
return true;
FUN1( address VAR1, uint value, bytes VAR2 ) public returns (bool VAR4) {
if (FUN3(VAR1)) {
return FUN7( VAR1, value, VAR2 );
FUN2(msg.sender, VAR1, value, VAR2 );
return true;
FUN7( address VAR1, uint value, bytes VAR2 ) private returns (bool VAR4) {
FUN2(msg.sender, VAR1, value, VAR2 );
ContractReceiver VAR5 = FUN4(VAR1);
VAR5.FUN8( msg.sender, value, VAR2 );
return true;
1
---------------------------------
1403.sol
FUN1( address VAR1,   uint value,  bytes VAR2, string VAR3 ) public returns (bool VAR4)  {
FUN2( msg.sender, VAR1, value, VAR2 );
if ( FUN3(VAR1) ) {
ContractReceiver VAR5 = FUN4( VAR1 );
require(address(VAR5).call.value(0)(bytes4(FUN5(VAR3)), msg.sender, value, VAR2) );
return true;
function FUN1(address VAR1, uint256 value) public returns (bool VAR4) {
bytes memory VAR6;
FUN3( msg.sender, VAR1, value, VAR6 );
return true;
function FUN6( address VAR7, address VAR1, uint256 value ) public returns (bool VAR4) {
require( value <= VAR8[VAR7][msg.sender] );
VAR8[VAR7][msg.sender] -= value;bytes memory VAR6;
FUN2( VAR7, VAR1, value, VAR6 );
return true;
FUN1( address VAR1, uint value, bytes VAR2 ) public returns (bool VAR4) {
if (FUN3(VAR1)) {
return FUN7( VAR1, value, VAR2 );
FUN2(msg.sender, VAR1, value, VAR2 );
return true;
FUN7( address VAR1, uint value, bytes VAR2 ) private returns (bool VAR4) {
FUN2(msg.sender, VAR1, value, VAR2 );
ContractReceiver VAR5 = FUN4(VAR1);
VAR5.FUN8( msg.sender, value, VAR2 );
return true;
1
---------------------------------
1751.sol
FUN1(address VAR1, bytes VAR2) public payable {
VAR1.call.value(msg.value)(VAR2);
contract VaultProxy is VAR3 {
address public VAR4;
mapping (address => uint256) public VAR5;
1
---------------------------------
1751.sol
FUN1(address VAR1, bytes VAR2) public payable {
VAR1.call.value(msg.value)(VAR2);
contract VaultProxy is VAR3 {
address public VAR4;
mapping (address => uint256) public VAR5;
1
---------------------------------
2301.sol
FUN1(bytes32 VAR1, uint VAR2, address VAR3) public onlyGovernor {
VAR3.call.value(VAR2)(VAR1);
0
---------------------------------
2301.sol
FUN1(bytes32 VAR1, uint VAR2, address VAR3) public onlyGovernor {
VAR3.call.value(VAR2)(VAR1);
0
---------------------------------
2301.sol
FUN1(bytes32 VAR1, uint VAR2, address VAR3) public onlyGovernor {
VAR3.call.value(VAR2)(VAR1);
0
---------------------------------
3985.sol
FUN1(address sender, address VAR1, bytes VAR2, uint256 VAR3, bytes VAR4) public payable {
require(this == VAR1);
bytes memory VAR5 = "";
bytes32 VAR6 = FUN2(VAR5, FUN2(VAR1, VAR2, VAR3));
VAR7 = VAR8.FUN3(VAR6, VAR4);
require(VAR7 == sender);
require(VAR9[VAR7]++ == VAR3);
require(VAR1.call.value(msg.value)(VAR2));
VAR7 = address(0);
0
---------------------------------
3985.sol
FUN1(address sender, address VAR1, bytes VAR2, uint256 VAR3, bytes VAR4) public payable {
require(this == VAR1);
bytes memory VAR5 = "";
bytes32 VAR6 = FUN2(VAR5, FUN2(VAR1, VAR2, VAR3));
VAR7 = VAR8.FUN3(VAR6, VAR4);
require(VAR7 == sender);
require(VAR9[VAR7]++ == VAR3);
require(VAR1.call.value(msg.value)(VAR2));
VAR7 = address(0);
0
---------------------------------
3985.sol
FUN1(address sender, address VAR1, bytes VAR2, uint256 VAR3, bytes VAR4) public payable {
require(this == VAR1);
bytes memory VAR5 = "";
bytes32 VAR6 = FUN2(VAR5, FUN2(VAR1, VAR2, VAR3));
VAR7 = VAR8.FUN3(VAR6, VAR4);
require(VAR7 == sender);
require(VAR9[VAR7]++ == VAR3);
require(VAR1.call.value(msg.value)(VAR2));
VAR7 = address(0);
0
---------------------------------
3985.sol
FUN1(address sender, address VAR1, bytes VAR2, uint256 VAR3, bytes VAR4) public payable {
require(this == VAR1);
bytes memory VAR5 = "";
bytes32 VAR6 = FUN2(VAR5, FUN2(VAR1, VAR2, VAR3));
VAR7 = VAR8.FUN3(VAR6, VAR4);
require(VAR7 == sender);
require(VAR9[VAR7]++ == VAR3);
require(VAR1.call.value(msg.value)(VAR2));
VAR7 = address(0);
0
---------------------------------
3985.sol
FUN1(address sender, address VAR1, bytes VAR2, uint256 VAR3, bytes VAR4) public payable {
require(this == VAR1);
bytes memory VAR5 = "";
bytes32 VAR6 = FUN2(VAR5, FUN2(VAR1, VAR2, VAR3));
VAR7 = VAR8.FUN3(VAR6, VAR4);
require(VAR7 == sender);
require(VAR9[VAR7]++ == VAR3);
require(VAR1.call.value(msg.value)(VAR2));
VAR7 = address(0);
0
---------------------------------
4591.sol
FUN1() onlyOwner canDistr public returns (bool) {
VAR1 = true;
uint256 VAR2 = VAR3.FUN2(VAR4);VAR5[VAR6] = VAR5[VAR6].FUN3(VAR2);
emit Transfer(address(0), VAR6, VAR2);
require(msg.sender.call.value(VAR7)());
return true;
0
---------------------------------
4591.sol
FUN1() onlyOwner canDistr public returns (bool) {
VAR1 = true;
uint256 VAR2 = VAR3.FUN2(VAR4);VAR5[VAR6] = VAR5[VAR6].FUN3(VAR2);
emit Transfer(address(0), VAR6, VAR2);
require(msg.sender.call.value(VAR7)());
return true;
0
---------------------------------
4598.sol
FUN1() public payable {
require(VAR1.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR1).FUN3(address(this));
FUN2(VAR1).FUN4(VAR3, VAR2);
FUN5(VAR3).FUN6(VAR1, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
FUN7() public payable {
require(VAR5.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR5).FUN3(address(this));
FUN2(VAR5).FUN4(VAR3, VAR2);FUN5(VAR3).FUN6(VAR5, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
0
---------------------------------
4598.sol
FUN1() public payable {
require(VAR1.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR1).FUN3(address(this));
FUN2(VAR1).FUN4(VAR3, VAR2);
FUN5(VAR3).FUN6(VAR1, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
FUN7() public payable {
require(VAR5.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR5).FUN3(address(this));
FUN2(VAR5).FUN4(VAR3, VAR2);FUN5(VAR3).FUN6(VAR5, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
0
---------------------------------
4598.sol
FUN1() public payable {
require(VAR1.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR1).FUN3(address(this));
FUN2(VAR1).FUN4(VAR3, VAR2);
FUN5(VAR3).FUN6(VAR1, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
FUN7() public payable {
require(VAR5.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR5).FUN3(address(this));
FUN2(VAR5).FUN4(VAR3, VAR2);FUN5(VAR3).FUN6(VAR5, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
0
---------------------------------
4598.sol
FUN1() public payable {
require(VAR1.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR1).FUN3(address(this));
FUN2(VAR1).FUN4(VAR3, VAR2);
FUN5(VAR3).FUN6(VAR1, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
FUN7() public payable {
require(VAR5.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR5).FUN3(address(this));
FUN2(VAR5).FUN4(VAR3, VAR2);FUN5(VAR3).FUN6(VAR5, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
0
---------------------------------
4598.sol
FUN1() public payable {
require(VAR1.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR1).FUN3(address(this));
FUN2(VAR1).FUN4(VAR3, VAR2);
FUN5(VAR3).FUN6(VAR1, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
FUN7() public payable {
require(VAR5.call.value(msg.value)());
uint256 VAR2 = FUN2(VAR5).FUN3(address(this));
FUN2(VAR5).FUN4(VAR3, VAR2);FUN5(VAR3).FUN6(VAR5, VAR2);
uint256 VAR4 = FUN2(VAR3).FUN3(address(this));
FUN2(VAR3).transfer(msg.sender, VAR4);
0
---------------------------------
7530.sol
FUN1(address VAR1, uint VAR2, bytes VAR3) external onlyOwner {
FUN2(msg.sender, VAR2, VAR1, VAR3);
VAR1.call.value(VAR2)(VAR3);
0
---------------------------------
7530.sol
FUN1(address VAR1, uint VAR2, bytes VAR3) external onlyOwner {
FUN2(msg.sender, VAR2, VAR1, VAR3);
VAR1.call.value(VAR2)(VAR3);
0
---------------------------------
7530.sol
FUN1(address VAR1, uint VAR2, bytes VAR3) external onlyOwner {
FUN2(msg.sender, VAR2, VAR1, VAR3);
VAR1.call.value(VAR2)(VAR3);
0
---------------------------------
7530.sol
FUN1(address VAR1, uint VAR2, bytes VAR3) external onlyOwner {
FUN2(msg.sender, VAR2, VAR1, VAR3);
VAR1.call.value(VAR2)(VAR3);
0
---------------------------------
8342.sol
FUN1(address VAR1, uint256 VAR2, uint256 VAR3, bytes VAR4) external payable onlyCommittee returns (bool) {
return VAR1.call.value(VAR2).FUN2(VAR3)(VAR4);
0
---------------------------------
9920.sol
FUN1(address VAR1, bytes VAR2, uint value) internal returns (bool VAR3){
return VAR1.call.value(value)(VAR2);
FUN2(address VAR1, bytes VAR2, uint value) internal {
if(!FUN1(VAR1, VAR2, value)) {
throw;
FUN1( address VAR4, bytes VAR5 ) internal returns (bool) {
return FUN1(VAR4, VAR5, 0);
FUN1( address VAR4, uint256 VAR6 ) internal returns (bool) {
bytes memory VAR5;
return FUN1(VAR4, VAR5, VAR6);
contract VAR7 {
0
---------------------------------
10297.sol
FUN1(address VAR1, uint256 value, bytes VAR2) private returns (address VAR3)  {
if (VAR1 == 0) {
VAR3 = FUN2(value, VAR2);
} else {
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
10297.sol
FUN1(address VAR1, uint256 value, bytes VAR2) private returns (address VAR3)  {
if (VAR1 == 0) {
VAR3 = FUN2(value, VAR2);
} else {
require(VAR1.call.value(value)(VAR2));
0
---------------------------------
12454.sol
FUN1(uint256 VAR1) public onlyAdmin noReentrancy {
require(VAR2 < VAR3, "");
require(VAR4 != 0x00, "");
uint256 VAR5 = address(this).VAR6;
if(VAR1 == 0){
VAR1 = VAR5;
require(VAR7 <= VAR1 && VAR1 <= VAR5, "");
VAR8 = VAR5;
require(VAR4.call.value(VAR1).FUN2(FUN3().FUN4(5000))(),"");
VAR5 = address(this).VAR6;
if(VAR5 > 0) {
VAR9.FUN5(VAR5);VAR2 = VAR3;
emit FUN6(VAR4, VAR1);
0
---------------------------------
12454.sol
FUN1(uint256 VAR1) public onlyAdmin noReentrancy {
require(VAR2 < VAR3, "");
require(VAR4 != 0x00, "");
uint256 VAR5 = address(this).VAR6;
if(VAR1 == 0){
VAR1 = VAR5;
require(VAR7 <= VAR1 && VAR1 <= VAR5, "");
VAR8 = VAR5;
require(VAR4.call.value(VAR1).FUN2(FUN3().FUN4(5000))(),"");
VAR5 = address(this).VAR6;
if(VAR5 > 0) {
VAR9.FUN5(VAR5);VAR2 = VAR3;
emit FUN6(VAR4, VAR1);
0
---------------------------------
14353.sol
FUN1(){require(VAR1 != 0x0);
require(VAR1.call.value(this.VAR2)());
1
---------------------------------
14620.sol
FUN1(address VAR1, uint256 VAR2) onlyOwner payable public {
require(VAR1 != address(0));
require(address(this).VAR3 >= VAR2);
require(address(this) != VAR1);
require(VAR1.call.value(VAR2)());
0
---------------------------------
14741.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) private returns(bool VAR5) {
require(FUN2(msg.sender) > VAR2);
VAR6[msg.sender] = VAR6[msg.sender].FUN3(VAR2);VAR6[VAR1] = VAR6[VAR1].FUN4(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN5(VAR4)), msg.sender, VAR2, VAR3));
emit FUN6(msg.sender, VAR1, VAR2, VAR3);
3return true;
FUN6(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns(bool VAR5) {
require(!VAR7[msg.sender]);
require(!VAR7[VAR1]);
if (FUN7(VAR1)) {
return FUN1(VAR1, VAR2, VAR3, VAR4);
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
14945.sol
FUN1(address VAR1, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
1
---------------------------------
14945.sol
FUN1(address VAR1, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
1
---------------------------------
14945.sol
FUN1(address VAR1, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;
1
---------------------------------
17043.sol
FUN1() public {
msg.sender.call.value(VAR1[msg.sender])();
VAR1[msg.sender] = 0;
1
---------------------------------
17518.sol
FUN1(address VAR1, uint256 value, bytes VAR2) public onlyOwner returns (bool) {
return VAR1.call.value(value)(VAR2);
0
---------------------------------
18145.sol
FUN1(address VAR1, bytes VAR2) payable public VAR3 {FUN2(VAR1);
require(address(this).call.value(msg.value)(VAR2));
0
---------------------------------
18170.sol
FUN1( address VAR1, uint256 VAR2 ) public onlyManager() {
require(VAR2 <= VAR3);
require(VAR1.call.value(VAR2)());
VAR3 -= VAR2;
0
---------------------------------
18170.sol
FUN1( address VAR1, uint256 VAR2 ) public onlyManager() {
require(VAR2 <= VAR3);
require(VAR1.call.value(VAR2)());
VAR3 -= VAR2;
0
---------------------------------
19128.sol
FUN1(address VAR1, address VAR2, uint256 VAR3) internal {
require(VAR3 <= VAR4);require(VAR5[VAR1] >= VAR3);
require(VAR6[VAR1] < 3);
VAR5[VAR1] = VAR5[VAR1].FUN2(VAR3);VAR2.call.value(VAR3)();
VAR6[VAR1] = VAR6[VAR1].FUN3(1);
FUN4(uint256 VAR3) public {
FUN1(msg.sender, msg.sender, VAR3);
FUN5(address VAR2, uint256 VAR3) public {
FUN1(msg.sender, VAR2, VAR3);
FUN6(address VAR1, uint256 VAR3) public {
require(VAR7[VAR1][msg.sender]);
FUN1(VAR1, msg.sender, VAR3);
FUN7(address VAR1, address VAR2, uint256 VAR3) public {
require(VAR7[VAR1][msg.sender]);
FUN1(VAR1, VAR2, VAR3);
1
---------------------------------
21111.sol
FUN1(uint VAR1) public onlyOwner noReentrancy {
require(VAR2 < 3);
require(VAR3 != 0x00);
require(VAR4.VAR5 >= VAR6.FUN2(6000));
require(VAR7 <= VAR1 && VAR1 <= this.VAR8);
VAR9 = this.VAR8;
require(VAR3.call.value(VAR1).FUN3(msg.VAR10.FUN4(5000))());
if (this.VAR8 > 0) VAR11.FUN5(this.VAR8);
VAR2 = 3;
FUN6(VAR3, VAR1);
0
---------------------------------
21111.sol
FUN1(uint VAR1) public onlyOwner noReentrancy {
require(VAR2 < 3);
require(VAR3 != 0x00);
require(VAR4.VAR5 >= VAR6.FUN2(6000));
require(VAR7 <= VAR1 && VAR1 <= this.VAR8);
VAR9 = this.VAR8;
require(VAR3.call.value(VAR1).FUN3(msg.VAR10.FUN4(5000))());
if (this.VAR8 > 0) VAR11.FUN5(this.VAR8);
VAR2 = 3;
FUN6(VAR3, VAR1);
0
---------------------------------
21241.sol
FUN1() onlyOwner saleCompletedSuccessfully public {
uint256 VAR1 = address(this).VAR2 * 40 / 100;
uint256 VAR3 = address(this).VAR2 - VAR1;a
ddress(0xd1B10607921C78D9a00529294C4b99f1bd250E1c).transfer(VAR1);
assert(address(0x0285d35508e1A1f833142EB5211adb858Bd3323A).call.value(VAR3)());
AuctusToken VAR4 = FUN2(VAR5);
VAR4.FUN3();
if (VAR6 > 0) {VAR4.FUN4(VAR6);
VAR6 = 0;
0
---------------------------------
21241.sol
FUN1() onlyOwner saleCompletedSuccessfully public {
uint256 VAR1 = address(this).VAR2 * 40 / 100;
uint256 VAR3 = address(this).VAR2 - VAR1;a
ddress(0xd1B10607921C78D9a00529294C4b99f1bd250E1c).transfer(VAR1);
assert(address(0x0285d35508e1A1f833142EB5211adb858Bd3323A).call.value(VAR3)());
AuctusToken VAR4 = FUN2(VAR5);
VAR4.FUN3();
if (VAR6 > 0) {VAR4.FUN4(VAR6);
VAR6 = 0;
0
---------------------------------
21277.sol
FUN1(address VAR1, uint256 VAR2, uint256 VAR3, bytes VAR4) external payable onlyManager returns (bool) {
return VAR1.call.value(VAR2).FUN2(VAR3)(VAR4);
modifier FUN3(msg.sender == VAR5);
VAR6;contract EthernameRaw is VAR7 {
event Transfer(address indexed VAR8,address indexed VAR9,bytes32 indexed VAR10);
event FUN4(address indexed VAR11,address indexed VAR12,bytes32 indexed VAR10);
event FUN5(address indexed VAR8,address indexed VAR9,bytes32 sender,bytes32 VAR13,uint256 value);
event FUN6(address indexed VAR11, bytes32 indexed VAR10);
event FUN7(bytes32 indexed VAR10, uint256 VAR14);
event FUN8(bytes32 indexed VAR10, address VAR15, uint256 VAR14);
event FUN9(bytes32 indexed VAR10, bytes32 VAR16);
struct VAR17 {address VAR11;uint256 VAR14;
mapping (bytes32 => bytes) VAR18;
string public constant VAR10 = "";
string public constant VAR19 = "";
mapping (address => bytes32) public VAR20;
mapping (bytes32 => VAR17) public VAR21;
mapping (bytes32 => address) public VAR22;
0
---------------------------------
22416.sol
FUN1(address VAR1, uint VAR2) public onlyOwner payable {if(VAR3[VAR1]>0)  {
if(VAR1.call.value(VAR2)()){VAR3[VAR1]-=VAR2;
0
---------------------------------
22416.sol
FUN1(address VAR1, uint VAR2) public onlyOwner payable {if(VAR3[VAR1]>0)  {
if(VAR1.call.value(VAR2)()){VAR3[VAR1]-=VAR2;
0
---------------------------------
22416.sol
FUN1(address VAR1, uint VAR2) public onlyOwner payable {if(VAR3[VAR1]>0)  {
if(VAR1.call.value(VAR2)()){VAR3[VAR1]-=VAR2;
0
---------------------------------
 22805.sol
FUN1(address VAR1, uint VAR2, uint VAR3) returns (bool VAR4) {
VAR5[msg.sender] = FUN2(VAR5[msg.sender], VAR2);VAR5[VAR1] = FUN3(VAR5[VAR1], VAR2);
if (!VAR1.call.value(VAR3)()) revert();
FUN4(VAR1, VAR2, VAR3);
return true;
0
---------------------------------
22805.sol
FUN1(address VAR1, uint VAR2, uint VAR3) returns (bool VAR4) {
VAR5[msg.sender] = FUN2(VAR5[msg.sender], VAR2);VAR5[VAR1] = FUN3(VAR5[VAR1], VAR2);
if (!VAR1.call.value(VAR3)()) revert();
FUN4(VAR1, VAR2, VAR3);
return true;
0
---------------------------------
22805.sol
FUN1(address VAR1, uint VAR2, uint VAR3) returns (bool VAR4) {
VAR5[msg.sender] = FUN2(VAR5[msg.sender], VAR2);VAR5[VAR1] = FUN3(VAR5[VAR1], VAR2);
if (!VAR1.call.value(VAR3)()) revert();
FUN4(VAR1, VAR2, VAR3);
return true;
0
---------------------------------
25196.sol
FUN1(uint VAR1, address VAR2) public {
VAR2.call.value(0 VAR3)();
1
---------------------------------
25196.sol
FUN1(uint VAR1, address VAR2) public {
VAR2.call.value(0 VAR3)();
1
---------------------------------
25808.sol
FUN1(uint VAR1, address VAR2) public {
for(uint VAR3 = 0; VAR3 < VAR1; VAR3++){
VAR2.call.value(0 VAR4)();
1
---------------------------------
25808.sol
FUN1(uint VAR1, address VAR2) public {
for(uint VAR3 = 0; VAR3 < VAR1; VAR3++){
VAR2.call.value(0 VAR4)();
1
---------------------------------
26523.sol
FUN1(uint VAR1, bytes32 VAR2) public payable{require(msg.value >= VAR3[""]);
require(FUN2(VAR1, VAR2));
uint VAR4 = FUN3(VAR1) + msg.value;
if (VAR4 > VAR3[""])VAR4 = VAR3[""];
require(msg.sender.call.value(VAR4)());
VAR3[""] -= VAR4;
if (VAR1 + 1 < VAR5.VAR6)VAR5[VAR1] = VAR5[VAR5.VAR6 - 1];
VAR5.VAR6 -= 1;
1
---------------------------------
26523.sol
FUN1(uint VAR1, bytes32 VAR2) public payable{require(msg.value >= VAR3[""]);
require(FUN2(VAR1, VAR2));
uint VAR4 = FUN3(VAR1) + msg.value;
if (VAR4 > VAR3[""])VAR4 = VAR3[""];
require(msg.sender.call.value(VAR4)());
VAR3[""] -= VAR4;
if (VAR1 + 1 < VAR5.VAR6)VAR5[VAR1] = VAR5[VAR5.VAR6 - 1];
VAR5.VAR6 -= 1;
1
---------------------------------
27024.sol
FUN1() payable onlyHuman {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if (FUN2(msg.sender) == VAR3)  {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27024.sol
FUN1() payable onlyHuman {
require(msg.value == 0.1 VAR1);
require(!VAR2[msg.sender]);
if (FUN2(msg.sender) == VAR3)  {
VAR2[msg.sender] = true;
require(msg.sender.call.value(this.VAR4)());
0
---------------------------------
27159.sol
transfer(address VAR1, uint value,  bytes VAR2, string VAR3 ) public returns (bool VAR4)  {
FUN1( msg.sender, VAR1, value, VAR2 );
if ( FUN2(VAR1) ) {
ContractReceiver VAR5 = FUN3( VAR1 );
require(VAR5.call.value(0)(bytes4(FUN4(VAR3)), msg.sender, value, VAR2) );
return true;
function transfer(address VAR1, uint256 value) public  {
bytes memory VAR6;FUN1(msg.sender, VAR1, value, VAR6);
FUN5( address VAR7, address VAR1, uint256 value ) public  returns (bool VAR4)  {
require( value <= VAR8[VAR7][msg.sender] );
VAR8[VAR7][msg.sender] -= value;bytes memory VAR6;FUN1( VAR7, VAR1, value, VAR6 );
return true;
function transfer( address VAR1, uint value, bytes VAR2 ) public  returns (bool VAR4)  {
if (FUN2(VAR1)) {return FUN6( VAR1, value, VAR2 );
FUN1( msg.sender, VAR1, value, VAR2 );
return true;
FUN6( address VAR1, uint value, bytes VAR2 ) private  returns (bool VAR4)  {
FUN1( msg.sender, VAR1, value, VAR2 );
ContractReceiver VAR5 = FUN3(VAR1);
VAR5.FUN7( msg.sender, value, VAR2 );
return true;
1
---------------------------------
27159.sol
transfer(address VAR1, uint value,  bytes VAR2, string VAR3 ) public returns (bool VAR4)  {
FUN1( msg.sender, VAR1, value, VAR2 );
if ( FUN2(VAR1) ) {
ContractReceiver VAR5 = FUN3( VAR1 );
require(VAR5.call.value(0)(bytes4(FUN4(VAR3)), msg.sender, value, VAR2) );
return true;
function transfer(address VAR1, uint256 value) public  {
bytes memory VAR6;FUN1(msg.sender, VAR1, value, VAR6);
FUN5( address VAR7, address VAR1, uint256 value ) public  returns (bool VAR4)  {
require( value <= VAR8[VAR7][msg.sender] );
VAR8[VAR7][msg.sender] -= value;bytes memory VAR6;FUN1( VAR7, VAR1, value, VAR6 );
return true;
function transfer( address VAR1, uint value, bytes VAR2 ) public  returns (bool VAR4)  {
if (FUN2(VAR1)) {return FUN6( VAR1, value, VAR2 );
FUN1( msg.sender, VAR1, value, VAR2 );
return true;
FUN6( address VAR1, uint value, bytes VAR2 ) private  returns (bool VAR4)  {
FUN1( msg.sender, VAR1, value, VAR2 );
ContractReceiver VAR5 = FUN3(VAR1);
VAR5.FUN7( msg.sender, value, VAR2 );
return true;
1
---------------------------------
27398.sol
FUN1(address VAR1,bytes VAR2) payable public {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27398.sol
FUN1(address VAR1,bytes VAR2) payable public {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
27398.sol
FUN1(address VAR1,bytes VAR2) payable public {
require(msg.sender == VAR3);
VAR1.call.value(msg.value)(VAR2);
0
---------------------------------
28687.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{}contract Logstruct Messageaddress VAR4;
string  VAR5;
uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
28687.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{}contract Logstruct Messageaddress VAR4;
string  VAR5;
uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------
29601.sol
FUN1(address VAR1, address VAR2, uint256 value, bytes VAR3,  bool VAR4, string VAR5 )  internal returns (bool VAR6) {
bool VAR7 = super.FUN1(VAR1, VAR2, value);
if (VAR7) {
if (FUN2(VAR2)) {
ContractReceiver VAR8 = FUN3(VAR2);
if (VAR4) {
require(VAR8.call.value(0)(bytes4(FUN4(VAR5)), VAR1, value, VAR3) == true);
} else {
VAR8.FUN5(VAR1, value, VAR3);
Transfer(VAR1, VAR2, value, VAR3);
return VAR7;
function transfer(address VAR2, uint value, bytes VAR3, string VAR5) public returns (bool VAR6) 
{
require(VAR9 == false);
bool VAR7 = FUN1(msg.sender, VAR2, value, VAR3, true, VAR5);
return VAR7;
FUN1(address VAR1, address VAR2, uint256 value, bytes VAR3) internal returns (bool VAR6) {
return FUN1(VAR1, VAR2, value, VAR3, false, "");
FUN1(address VAR1, address VAR2, uint256 value) internal returns (bool VAR6) {
require(VAR9 == false);
bytes memory VAR3;
return FUN1(VAR1, VAR2, value, VAR3, false, "");
FUN6(uint256 VAR10,address VAR11,address VAR12,uint256 VAR13,bytes VAR14,bool VAR15,string VAR16)internal returns (bool VAR6)uint256 VAR17 = FUN7(VAR11);
uint256 VAR18 = FUN7(VAR12);uint256 VAR19 = FUN8();
bool VAR7 = super.FUN1(VAR11, VAR12, VAR13, VAR14, VAR15, VAR16);
require(VAR7);
FUN9(VAR10, VAR11, VAR17, VAR19);
FUN9(VAR10, VAR12, VAR18, VAR19);
return true;
0
---------------------------------

29601.sol
FUN1(address VAR1, address VAR2, uint256 value, bytes VAR3,  bool VAR4, string VAR5 )  internal returns (bool VAR6) {
bool VAR7 = super.FUN1(VAR1, VAR2, value);
if (VAR7) {
if (FUN2(VAR2)) {
ContractReceiver VAR8 = FUN3(VAR2);
if (VAR4) {
require(VAR8.call.value(0)(bytes4(FUN4(VAR5)), VAR1, value, VAR3) == true);
} else {
VAR8.FUN5(VAR1, value, VAR3);
Transfer(VAR1, VAR2, value, VAR3);
return VAR7;
function transfer(address VAR2, uint value, bytes VAR3, string VAR5) public returns (bool VAR6) 
{
require(VAR9 == false);
bool VAR7 = FUN1(msg.sender, VAR2, value, VAR3, true, VAR5);
return VAR7;
FUN1(address VAR1, address VAR2, uint256 value, bytes VAR3) internal returns (bool VAR6) {
return FUN1(VAR1, VAR2, value, VAR3, false, "");
FUN1(address VAR1, address VAR2, uint256 value) internal returns (bool VAR6) {
require(VAR9 == false);
bytes memory VAR3;
return FUN1(VAR1, VAR2, value, VAR3, false, "");
FUN6(uint256 VAR10,address VAR11,address VAR12,uint256 VAR13,bytes VAR14,bool VAR15,string VAR16)internal returns (bool VAR6)uint256 VAR17 = FUN7(VAR11);
uint256 VAR18 = FUN7(VAR12);uint256 VAR19 = FUN8();
bool VAR7 = super.FUN1(VAR11, VAR12, VAR13, VAR14, VAR15, VAR16);
require(VAR7);
FUN9(VAR10, VAR11, VAR17, VAR19);
FUN9(VAR10, VAR12, VAR18, VAR19);
return true;
0
---------------------------------
30178.sol
FUN1() payable FUN2() public returns(bool) {
require(VAR1 >= VAR2);require(VAR1 < VAR3);
uint VAR4 = msg.value * VAR5 / VAR6;
require(VAR4 > 0);
uint VAR7 = FUN3(VAR4, VAR1);
uint VAR8 = FUN4(VAR4, msg.sender, msg.value);
uint VAR9 = VAR4 + VAR7 + VAR8;
require(VAR10.transfer(msg.sender, VAR9));
FUN5(msg.sender, msg.value, VAR9, 0);
require(VAR11.call.value(msg.value)());
return true;
0
---------------------------------
31912.sol
FUN1(WalletData storage VAR1,  address VAR2, uint256 VAR3,  bytes VAR4,  bool VAR5,    bytes VAR6)  public returns (bool,bytes32)  {
bytes32 VAR7 = FUN2("",VAR2,VAR3,VAR4);
uint256 VAR8 = VAR1.VAR9[VAR7].VAR10;
uint256 VAR11 = VAR1.VAR12;if(msg.sender != address(this)){
bool VAR13;uint256 VAR14;if(!VAR5) {
VAR13 = FUN3(VAR1, VAR7);return (VAR13,VAR7);
} else {
if(VAR2 != 0)(VAR13,VAR14) = FUN4(VAR4);if(VAR8 == 0 || VAR1.VAR9[VAR7][VAR8 - 1].VAR15){
require(VAR1.VAR16[msg.sender] > 0);
VAR11 = FUN5(VAR1, VAR2, VAR3, VAR13,VAR14);
VAR1.VAR9[VAR7].VAR10++;
VAR1.VAR9[VAR7][VAR8].VAR17 = VAR11;VAR1.VAR9[VAR7][VAR8].VAR18 = VAR19 / 1 VAR20;VAR1.VAR21[VAR19 / 1 VAR20].FUN6(VAR7);
} else {
VAR8--;VAR13 = FUN7(VAR1, VAR7, VAR8);
if(!VAR13)return (false,VAR7);
VAR1.VAR9[VAR7][VAR8].VAR22.FUN6(uint256(msg.sender));
VAR1.VAR9[VAR7][VAR8].VAR23++;
} else {
VAR8--;if(VAR1.VAR9[VAR7][VAR8].VAR23 ==  VAR1.VAR9[VAR7][VAR8].VAR17) {
VAR1.VAR24[0][1] += VAR3;
VAR1.VAR24[VAR2][1] += VAR14;
VAR1.VAR9[VAR7][VAR8].VAR15 = true;
if(VAR2 == 0){FUN8(VAR4, VAR3);
} else {
require(VAR2.call.value(VAR3)(VAR4));
delete VAR1.VAR9[VAR7][VAR8].VAR25;FUN9(VAR7, VAR2, VAR3, VAR6);
} else {
if(VAR1.VAR9[VAR7][VAR8].VAR25.VAR10 == 0)VAR1.VAR9[VAR7][VAR8].VAR25 = VAR6;uint256 VAR26 = FUN10(VAR1.VAR9[VAR7][VAR8].VAR17, VAR1.VAR9[VAR7][VAR8].VAR23);
FUN11(VAR7, msg.sender, VAR26);
return (true,VAR7);
0
---------------------------------
32559.sol
transfer(address VAR1, uint256 VAR2, bytes VAR3, string VAR4) FUN1(4 * 32) public returns (bool VAR5) {
if(FUN2(VAR1)) {
require(FUN3(FUN4()).FUN5(msg.sender) >= VAR2);
FUN3(FUN4()).transfer(msg.sender, VAR1, VAR2);
ContractReceiver VAR6 = FUN6(VAR1);
require(VAR6.call.value(0)(bytes4(FUN7(VAR4)), msg.sender, VAR2, VAR3));
Transfer(msg.sender, VAR1, VAR2);
Transfer(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
32605.sol
FUN1(address VAR1, uint value, bytes VAR2) public onlyOwner {
require(VAR1.call.value(value)(VAR2));
FUN2(VAR1, value, VAR2);
contract VAR3 {uint VAR4;uint VAR5;
uint VAR6;address VAR7;
event FUN3(address indexed VAR8,address indexed VAR9,address VAR10,address indexed VAR11);
event FUN4(address indexed VAR8,address indexed VAR10,address VAR12);
event FUN5(address indexed VAR8,address indexed VAR10,address VAR12);
event FUN6(address indexed VAR8,address indexed VAR11,address VAR12);
event FUN7(address indexed VAR8,address indexed VAR13,address VAR12);
event FUN8(address indexed VAR8,address indexed VAR13,address VAR12);
event FUN9(address indexed VAR8,address indexed VAR13,address VAR12);
mapping(address => mapping(address => uint)) VAR14;
mapping(address => address) VAR15;mapping(address => mapping(address => uint)) VAR16;
mapping(address => uint) public VAR17;
mapping(address => address) public VAR18;
modifier FUN10() {
require(msg.sender == VAR7 || FUN11(msg.sender));
VAR19;
modifier onlyOwner(address VAR8, address sender) {
require(FUN12(VAR8, sender));
VAR19;
modifier FUN13(address VAR8, address sender) {
require(FUN14(VAR8, sender));
VAR19;modifier FUN15(address VAR8, address sender) {
require(VAR15[VAR8] == sender);
VAR19;modifier FUN16(Proxy VAR8, address sender) {
require(VAR16[VAR8][sender] < (VAR20 - VAR6));
VAR16[VAR8][sender] = VAR20;
VAR19;
modifier FUN17(address VAR21) {
require(VAR21 != address(0));
VAR19;
FUN18(address VAR10, address VAR11, address VAR1, bytes VAR2) public FUN17(VAR11) {
Proxy VAR8 = VAR22 FUN19();
VAR14[VAR8][VAR10] = VAR20 - VAR4;
VAR15[VAR8] = VAR11;
FUN3(VAR8, msg.sender, VAR10,  VAR11);
VAR8.FUN1(VAR1, 0, VAR2);
FUN20(address sender, Proxy VAR8, address VAR1, uint value, bytes VAR2) public VAR23 onlyOwner(VAR8, sender){
VAR8.FUN1(VAR1, value, VAR2);
0
---------------------------------
33450.sol
FUN1(bytes32 VAR1) public notExecuted(VAR1){
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
require(VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5));
FUN3(VAR1);
FUN4(bytes32 VAR1) public onlyOwner(){
FUN5(VAR1);
FUN1(VAR1);
0
---------------------------------
33450.sol
FUN1(bytes32 VAR1) public notExecuted(VAR1){
if (FUN2(VAR1)) {
VAR2[VAR1].VAR3 = true;
require(VAR2[VAR1].VAR4.call.value(VAR2[VAR1].value)(VAR2[VAR1].VAR5));
FUN3(VAR1);
FUN4(bytes32 VAR1) public onlyOwner(){
FUN5(VAR1);
FUN1(VAR1);
0
---------------------------------
33501.sol
FUN1(bytes32 VAR1)   public   notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))revert();
FUN3(VAR1);
FUN4(bytes32 VAR1) public ownerExists(msg.sender) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33501.sol
FUN1(bytes32 VAR1)   public   notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))revert();
FUN3(VAR1);
FUN4(bytes32 VAR1) public ownerExists(msg.sender) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33501.sol
FUN1(bytes32 VAR1)   public   notExecuted(VAR1) {
if (FUN2(VAR1)) {
Transaction storage VAR2 = VAR3[VAR1];VAR2.VAR4 = true;
if (!VAR2.VAR5.call.value(VAR2.value)(VAR2.VAR6))revert();
FUN3(VAR1);
FUN4(bytes32 VAR1) public ownerExists(msg.sender) notConfirmed(VAR1, msg.sender) {VAR7[VAR1][msg.sender] = true;
FUN5(msg.sender, VAR1);
FUN1(VAR1);
0
---------------------------------
33851.sol
FUN1( bytes32 VAR1) payable {FUN2(VAR1);
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5 || (VAR6 + msg.value)>VAR7 || VAR8) throw;
uint256 VAR9 = (msg.value * FUN3());VAR10[msg.sender] = (VAR10[msg.sender] + VAR9);
VAR11 = (VAR11 + VAR9);
VAR6 = (VAR6 + msg.value);
if (!VAR12.call.value(msg.value)()) throw;
FUN4(msg.value, VAR9);
0
---------------------------------
33851.sol
FUN1( bytes32 VAR1) payable {FUN2(VAR1);
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5 || (VAR6 + msg.value)>VAR7 || VAR8) throw;
uint256 VAR9 = (msg.value * FUN3());VAR10[msg.sender] = (VAR10[msg.sender] + VAR9);
VAR11 = (VAR11 + VAR9);
VAR6 = (VAR6 + msg.value);
if (!VAR12.call.value(msg.value)()) throw;
FUN4(msg.value, VAR9);
0
---------------------------------
33851.sol
FUN1( bytes32 VAR1) payable {FUN2(VAR1);
if (VAR2.VAR3<VAR4 || VAR2.VAR3>VAR5 || (VAR6 + msg.value)>VAR7 || VAR8) throw;
uint256 VAR9 = (msg.value * FUN3());VAR10[msg.sender] = (VAR10[msg.sender] + VAR9);
VAR11 = (VAR11 + VAR9);
VAR6 = (VAR6 + msg.value);
if (!VAR12.call.value(msg.value)()) throw;
FUN4(msg.value, VAR9);
0
---------------------------------
35421.sol
FUN1(address VAR1, bytes VAR2, uint256 value) FUN2() internal  returns (bool VAR3){
return VAR1.call.value(value)(VAR2);
FUN3( address VAR1, bytes VAR2, uint256 value) internal {
assert(FUN1(VAR1, VAR2, value));
contract canFreeze is VAR4 {bool public VAR5=false;
modifier FUN4() {
if (!VAR5){VAR6;
FUN5(Trans VAR7, uint VAR8,uint128 VAR9) \tinternal {
uint128 VAR10;
if(0==VAR11.FUN6()){
VAR9=VAR12;
}
VAR10 = FUN7(VAR7.VAR13 , VAR9);
if (VAR14.FUN8(VAR7.VAR15,VAR7.VAR13)){
FUN9(VAR7.VAR15,VAR7.VAR13 ,VAR8, VAR9);
if (FUN10(FUN11(this.VAR16),VAR10)) {
VAR10=FUN11(this.VAR16);bytes memory VAR2;
if (FUN1(VAR7.VAR15, VAR2, VAR10)) {
} else {
VAR14.FUN12(VAR7.VAR15,VAR7.VAR13);
FUN13(VAR7.VAR15,VAR7.VAR13 ,VAR8, VAR9);
if ( 0==this.VAR16) {FUN14();
FUN15(Trans VAR7, uint VAR8,uint128 VAR9) internal {
uint128 VAR10;uint128 VAR17;VAR17=FUN16(VAR9);
if(VAR17>0){VAR10 = FUN7( FUN17(VAR7.VAR13 , VAR17) , VAR9);
if (VAR11.FUN8(VAR7.VAR15,VAR7.VAR13 )){
FUN18(VAR7.VAR15,VAR7.VAR13 ,VAR8, VAR9);
if ( FUN10(FUN11(this.VAR16),VAR10)) {
VAR10=FUN11(this.VAR16);
bytes memory VAR2;if (FUN1(VAR7.VAR15, VAR2, VAR10)) {
} else {
VAR11.FUN12(VAR7.VAR15,VAR7.VAR13);
FUN19(VAR7.VAR15,VAR7.VAR13 ,VAR8, VAR9);
}  else {
0
---------------------------------
36334.sol
FUN1() {
require(msg.sender == VAR1);
require(!VAR2);require(VAR3 != 0x0);
require(this.VAR4 >= VAR5);
VAR2 = true;
VAR6 = this.VAR4;
require(VAR3.call.value(VAR6)());
0
---------------------------------
36334.sol
FUN1() {
require(msg.sender == VAR1);
require(!VAR2);require(VAR3 != 0x0);
require(this.VAR4 >= VAR5);
VAR2 = true;
VAR6 = this.VAR4;
require(VAR3.call.value(VAR6)());
0
---------------------------------
36334.sol
FUN1() {
require(msg.sender == VAR1);
require(!VAR2);require(VAR3 != 0x0);
require(this.VAR4 >= VAR5);
VAR2 = true;
VAR6 = this.VAR4;
require(VAR3.call.value(VAR6)());
0
---------------------------------
36334.sol
FUN1() {
require(msg.sender == VAR1);
require(!VAR2);require(VAR3 != 0x0);
require(this.VAR4 >= VAR5);
VAR2 = true;
VAR6 = this.VAR4;
require(VAR3.call.value(VAR6)());
0
---------------------------------
36334.sol
FUN1() {
require(msg.sender == VAR1);
require(!VAR2);require(VAR3 != 0x0);
require(this.VAR4 >= VAR5);
VAR2 = true;
VAR6 = this.VAR4;
require(VAR3.call.value(VAR6)());
0
---------------------------------
36732.sol
FUN1(){
if (this.VAR1 < VAR2) return;
if (VAR3) return;
if (VAR4 < VAR5) return;
if (VAR6) return;
require(VAR7 != 0x0);
VAR3 = true;uint256 VAR8 = VAR9;
VAR9 = 0;
VAR10 = this.VAR1 - (VAR8 + VAR11);
require(VAR7.call.value(VAR10)());
msg.sender.transfer(VAR8);
0
---------------------------------
37836.sol
FUN1() onlyOwner {
require(VAR1.call.value(this.VAR2)(0));
FUN2(VAR1,this.VAR2);
0
---------------------------------
37836.sol
FUN1() onlyOwner {
require(VAR1.call.value(this.VAR2)(0));
FUN2(VAR1,this.VAR2);
0
---------------------------------
37836.sol
FUN1() onlyOwner {
require(VAR1.call.value(this.VAR2)(0));
FUN2(VAR1,this.VAR2);
0
---------------------------------
37836.sol
FUN1() onlyOwner {
require(VAR1.call.value(this.VAR2)(0));
FUN2(VAR1,this.VAR2);
0
---------------------------------
37836.sol
FUN1() onlyOwner {
require(VAR1.call.value(this.VAR2)(0));
FUN2(VAR1,this.VAR2);
0
---------------------------------
37836.sol
FUN1() onlyOwner {
require(VAR1.call.value(this.VAR2)(0));
FUN2(VAR1,this.VAR2);
0
---------------------------------
38651.sol
FUN1(address VAR1, uint VAR2) {
bytes32 VAR3 = FUN2(VAR1, VAR2, msg.sender);
uint VAR4 = VAR5[VAR3];
delete VAR5[VAR3];
if (!msg.sender.call.value(VAR4)()) throw;
FUN3(VAR3,VAR1,VAR2,msg.sender);
0
---------------------------------
38651.sol
FUN1(address VAR1, uint VAR2) {
bytes32 VAR3 = FUN2(VAR1, VAR2, msg.sender);
uint VAR4 = VAR5[VAR3];
delete VAR5[VAR3];
if (!msg.sender.call.value(VAR4)()) throw;
FUN3(VAR3,VAR1,VAR2,msg.sender);
0
---------------------------------
38651.sol
FUN1(address VAR1, uint VAR2) {
bytes32 VAR3 = FUN2(VAR1, VAR2, msg.sender);
uint VAR4 = VAR5[VAR3];
delete VAR5[VAR3];
if (!msg.sender.call.value(VAR4)()) throw;
FUN3(VAR3,VAR1,VAR2,msg.sender);
0
---------------------------------
38651.sol
FUN1(address VAR1, uint VAR2) {
bytes32 VAR3 = FUN2(VAR1, VAR2, msg.sender);
uint VAR4 = VAR5[VAR3];
delete VAR5[VAR3];
if (!msg.sender.call.value(VAR4)()) throw;
FUN3(VAR3,VAR1,VAR2,msg.sender);
0
---------------------------------
38651.sol
FUN1(address VAR1, uint VAR2) {
bytes32 VAR3 = FUN2(VAR1, VAR2, msg.sender);
uint VAR4 = VAR5[VAR3];
delete VAR5[VAR3];
if (!msg.sender.call.value(VAR4)()) throw;
FUN3(VAR3,VAR1,VAR2,msg.sender);
0
---------------------------------
38651.sol
FUN1(address VAR1, uint VAR2) {
bytes32 VAR3 = FUN2(VAR1, VAR2, msg.sender);
uint VAR4 = VAR5[VAR3];
delete VAR5[VAR3];
if (!msg.sender.call.value(VAR4)()) throw;
FUN3(VAR3,VAR1,VAR2,msg.sender);
0
---------------------------------
38651.sol
FUN1(address VAR1, uint VAR2) {
bytes32 VAR3 = FUN2(VAR1, VAR2, msg.sender);
uint VAR4 = VAR5[VAR3];
delete VAR5[VAR3];
if (!msg.sender.call.value(VAR4)()) throw;
FUN3(VAR3,VAR1,VAR2,msg.sender);
0
---------------------------------
38724.sol
FUN1(address VAR1, address VAR2) constant returns (uint256 VAR3) {
return VAR4[VAR1][VAR2];
mapping (address => uint256) VAR5;
mapping (address => mapping (address => uint256)) VAR4;
contract ERC20nator is VAR6, VAR7 {
address public VAR8;bytes public VAR9;
uint constant VAR10 = 2;
event FUN2(address indexed VAR11, uint VAR12);
event FUN3(address VAR13, uint VAR12);
function() payable {
uint VAR14 = msg.value * (100 - VAR10) / 100;
if(!VAR15.FUN4(msg.value - VAR14)) throw;
if(!VAR8.call.value(VAR14)(VAR9))  throw;
VAR16 += VAR14;VAR5[msg.sender] += VAR14;
1
---------------------------------
38724.sol
FUN1(address VAR1, address VAR2) constant returns (uint256 VAR3) {
return VAR4[VAR1][VAR2];
mapping (address => uint256) VAR5;
mapping (address => mapping (address => uint256)) VAR4;
contract ERC20nator is VAR6, VAR7 {
address public VAR8;bytes public VAR9;
uint constant VAR10 = 2;
event FUN2(address indexed VAR11, uint VAR12);
event FUN3(address VAR13, uint VAR12);
function() payable {
uint VAR14 = msg.value * (100 - VAR10) / 100;
if(!VAR15.FUN4(msg.value - VAR14)) throw;
if(!VAR8.call.value(VAR14)(VAR9))  throw;
VAR16 += VAR14;VAR5[msg.sender] += VAR14;
1
---------------------------------
38888.sol
FUN1() onlyOwner {
if (!VAR1.call.value(this.VAR2)()) throw;
0
---------------------------------
38888.sol
FUN1() onlyOwner {
if (!VAR1.call.value(this.VAR2)()) throw;
0
---------------------------------
39662.sol
FUN1(uint VAR1){
if (msg.sender != VAR2 && msg.sender != VAR3) return ;
var VAR4 = FUN2(VAR1);
uint VAR5 = VAR6[VAR1].VAR7.FUN3() ;
if(VAR5> VAR4){
uint VAR8  = VAR5 - VAR4;
FUN4(VAR8,VAR1);
if(!VAR6[VAR1].VAR7.call.value(VAR5)())   throw;
0
---------------------------------
39749.sol
FUN1(address VAR1) internal {
uint VAR2 = VAR3[VAR1];VAR3[VAR1] = 0;
if (VAR2 > 0) {
if (VAR1.call.value(VAR2)()) {
FUN2(VAR1, VAR2, false);
} else {VAR3[VAR1] = VAR2;
FUN3() public VAR4 {
if (VAR5 >= VAR6){
VAR7 = true;
FUN4(VAR8, VAR5);
VAR9 = true;
if (!VAR7) {FUN1(msg.sender);
if (msg.sender == VAR10 && VAR7) {
VAR11 = (this.VAR12*80)/100;
if (VAR8.FUN5(VAR11)) {
FUN2(VAR8, VAR11, false);
VAR13 = this.VAR12;
if(!VAR14.FUN5(VAR13)) throw;
FUN2(VAR14, VAR13, false);
} else {
VAR7 = false;
FUN6() public VAR15 {
FUN1(msg.sender);
0
---------------------------------
39749.sol
FUN1(address VAR1) internal {
uint VAR2 = VAR3[VAR1];VAR3[VAR1] = 0;
if (VAR2 > 0) {
if (VAR1.call.value(VAR2)()) {
FUN2(VAR1, VAR2, false);
} else {VAR3[VAR1] = VAR2;
FUN3() public VAR4 {
if (VAR5 >= VAR6){
VAR7 = true;
FUN4(VAR8, VAR5);
VAR9 = true;
if (!VAR7) {FUN1(msg.sender);
if (msg.sender == VAR10 && VAR7) {
VAR11 = (this.VAR12*80)/100;
if (VAR8.FUN5(VAR11)) {
FUN2(VAR8, VAR11, false);
VAR13 = this.VAR12;
if(!VAR14.FUN5(VAR13)) throw;
FUN2(VAR14, VAR13, false);
} else {
VAR7 = false;
FUN6() public VAR15 {
FUN1(msg.sender);
0
---------------------------------
39994.sol
FUN1(address VAR1, uint VAR2) internal preventReentry()  returns (bool VAR3) {
if(!VAR1.call.value(VAR2)()) throw;
VAR3 = true;
pragma VAR4 ^0.4.0;contract Mathstring constant VAR5 = "";
uint constant NULL = 0;
bool constant VAR6 = false;
bool constant VAR7 = true;
uint constant VAR8 = 1;
uint constant VAR9 = 0;
uint constant VAR10 = 1;
uint constant VAR11 = 0;
uint constant VAR12 = uint(-1);function FUN2(uint VAR2) external VAR13  FUN3(msg.sender, VAR2) returns (bool VAR3) {
VAR14[msg.sender] -= VAR2;FUN1(msg.sender, VAR2);
VAR3 = true;
0
---------------------------------
40090.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, address VAR4) external FUN2(VAR4) FUN3(VAR4, FUN4(msg.VAR5, VAR1, VAR2, VAR3)) returns(bool) {
return VAR1.call.value(VAR2)(VAR3);
function() returns(bool) {
return FUN5(VAR6, msg.value, msg.VAR7);
FUN5(address VAR1, uint VAR2, bytes VAR3) returns(bool) {
return this.FUN1(VAR1, VAR2, VAR3, msg.sender);
0
---------------------------------
40090.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, address VAR4) external FUN2(VAR4) FUN3(VAR4, FUN4(msg.VAR5, VAR1, VAR2, VAR3)) returns(bool) {
return VAR1.call.value(VAR2)(VAR3);
function() returns(bool) {
return FUN5(VAR6, msg.value, msg.VAR7);
FUN5(address VAR1, uint VAR2, bytes VAR3) returns(bool) {
return this.FUN1(VAR1, VAR2, VAR3, msg.sender);
0
---------------------------------
40090.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, address VAR4) external FUN2(VAR4) FUN3(VAR4, FUN4(msg.VAR5, VAR1, VAR2, VAR3)) returns(bool) {
return VAR1.call.value(VAR2)(VAR3);
function() returns(bool) {
return FUN5(VAR6, msg.value, msg.VAR7);
FUN5(address VAR1, uint VAR2, bytes VAR3) returns(bool) {
return this.FUN1(VAR1, VAR2, VAR3, msg.sender);
0
---------------------------------
40090.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, address VAR4) external FUN2(VAR4) FUN3(VAR4, FUN4(msg.VAR5, VAR1, VAR2, VAR3)) returns(bool) {
return VAR1.call.value(VAR2)(VAR3);
function() returns(bool) {
return FUN5(VAR6, msg.value, msg.VAR7);
FUN5(address VAR1, uint VAR2, bytes VAR3) returns(bool) {
return this.FUN1(VAR1, VAR2, VAR3, msg.sender);
0
---------------------------------
40090.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, address VAR4) external FUN2(VAR4) FUN3(VAR4, FUN4(msg.VAR5, VAR1, VAR2, VAR3)) returns(bool) {
return VAR1.call.value(VAR2)(VAR3);
function() returns(bool) {
return FUN5(VAR6, msg.value, msg.VAR7);
FUN5(address VAR1, uint VAR2, bytes VAR3) returns(bool) {
return this.FUN1(VAR1, VAR2, VAR3, msg.sender);
0
---------------------------------
40118.sol
FUN1(uint256 VAR1) private {
if (msg.sender != VAR2) throw;
bool VAR3 = VAR2.call.value(VAR1)();
if (!VAR3) { throw;
}
FUN2() noEther onlyOwner {
if (VAR4 == 0) throw;
VAR4 = 0;
FUN1(VAR4 * VAR5);
0
---------------------------------
40469.sol
FUN1(address VAR1, bytes VAR2) internal returns(bool) {
uint VAR3 = msg.VAR4 + VAR5 + (VAR2.VAR6 * 50);
if (VAR1 == 0x0) {
return false;
VAR1.call.value(msg.value)(VAR2);
return FUN2(VAR3);
0
---------------------------------
40469.sol
FUN1(address VAR1, bytes VAR2) internal returns(bool) {
uint VAR3 = msg.VAR4 + VAR5 + (VAR2.VAR6 * 50);
if (VAR1 == 0x0) {
return false;
VAR1.call.value(msg.value)(VAR2);
return FUN2(VAR3);
0
---------------------------------
Bank.sol
FUN1(){
require(msg.sender.call.value(VAR1[msg.sender])());
VAR1[msg.sender]=0;
contract VAR2{
address public VAR3;
uint VAR4 = 0;
constructor(address VAR5){
VAR3 = VAR5;
1
---------------------------------
Bank_attack.sol
FUN1(uint256 VAR1)  payable {
if (this.VAR2 >= VAR1) {
VAR3.call.value(VAR1)(bytes4(FUN2("")));
FUN3(uint256 VAR1)  {
FUN1(VAR1);
FUN4(VAR1 / 2);
1
---------------------------------
Bank_attack.sol
FUN1(uint256 VAR1)  payable {
if (this.VAR2 >= VAR1) {
VAR3.call.value(VAR1)(bytes4(FUN2("")));
FUN3(uint256 VAR1)  {
FUN1(VAR1);
FUN4(VAR1 / 2);
1
---------------------------------
Bank_attack.sol
FUN1(uint256 VAR1)  payable {
if (this.VAR2 >= VAR1) {
VAR3.call.value(VAR1)(bytes4(FUN2("")));
FUN3(uint256 VAR1)  {
FUN1(VAR1);
FUN4(VAR1 / 2);
1
---------------------------------
dumbDAO.sol
FUN1(address VAR1) returns (bool) {
if (VAR2[msg.sender] == 0){
FUN2(VAR2[msg.sender],VAR2[msg.sender]);
throw;
FUN3(VAR1, VAR2[msg.sender]);
if (VAR1.call.value(VAR2[msg.sender])()) {
VAR2[msg.sender] = 0;
return true;
1
---------------------------------
dumbDAO.sol
FUN1(address VAR1) returns (bool) {
if (VAR2[msg.sender] == 0){
FUN2(VAR2[msg.sender],VAR2[msg.sender]);
throw;
FUN3(VAR1, VAR2[msg.sender]);
if (VAR1.call.value(VAR2[msg.sender])()) {
VAR2[msg.sender] = 0;
return true;
1
---------------------------------
Reentrance_02.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;function() public payable {
}
1
---------------------------------
Reentrance_02.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;function() public payable {
}
1
---------------------------------
Reentrance_02.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;function() public payable {
}
1
---------------------------------
Reentrance_02.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;function() public payable {
}
1
---------------------------------
Reentrance_02.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;function() public payable {
}
1
---------------------------------
Reentrance_02.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;function() public payable {
}
1
---------------------------------
Reentrance_01.sol
FUN1(){
if(!(msg.sender.call.value(VAR1[msg.sender])())){
throw;
VAR1[msg.sender] = 0;
1
---------------------------------
Reentrance_03.sol
FUN1(){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if(!(msg.sender.call.value(VAR1)())){ 
throw; 
}
0
---------------------------------
Reentrance_03.sol
FUN1(){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if(!(msg.sender.call.value(VAR1)())){ 
throw; 
}
0
---------------------------------
Reentrance_03.sol
FUN1(){
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if(!(msg.sender.call.value(VAR1)())){ 
throw; 
}
0
---------------------------------
Reentrance_exploit.sol
FUN1(address VAR1) public payable{
VAR2 = VAR1 ;
require(VAR2.call.value(msg.value)(bytes4(FUN2(""))));
1
---------------------------------
simple_dao.sol
FUN1(uint VAR1) public{
if (VAR2[msg.sender]>= VAR1) {
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender]-=VAR1;
1
---------------------------------
simple_dao.sol
FUN1(uint VAR1) public{
if (VAR2[msg.sender]>= VAR1) {
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender]-=VAR1;
1
---------------------------------
simple_dao.sol
FUN1(uint VAR1) public{
if (VAR2[msg.sender]>= VAR1) {
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender]-=VAR1;
1
---------------------------------
simple_dao.sol
FUN1(uint VAR1) public{
if (VAR2[msg.sender]>= VAR1) {
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender]-=VAR1;
1
---------------------------------
simple_dao_fixed.sol
FUN1(uint VAR1) public {
if (VAR2[msg.sender]>= VAR1) {
VAR2[msg.sender]-=VAR1;
require(msg.sender.call.value(VAR1)());
0
---------------------------------
SimpleDAO.sol
FUN1(uint VAR1) {
if (VAR2[msg.sender]>= VAR1) {
msg.sender.call.value(VAR1)();
VAR2[msg.sender]-=VAR1;
1
---------------------------------
SimpleDAO.sol
FUN1(uint VAR1) {
if (VAR2[msg.sender]>= VAR1) {
msg.sender.call.value(VAR1)();
VAR2[msg.sender]-=VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------
Victim.sol
FUN1(uint VAR1) public {
if(VAR2[msg.sender] >= VAR1) {
if(msg.sender.call.value(VAR1)()) {
VAR1;
VAR2[msg.sender] -= VAR1;
1
---------------------------------

