2013.sol
FUN1(address VAR1, uint value, bytes VAR2) public onlyOwner{
if (VAR1.call.value(value)(VAR2))emit FUN2(VAR1,value,VAR2);
VAR3 FUN3(VAR1,value,VAR2);
library VAR4 {
0
---------------------------------
6881.sol
FUN1(ERC20 VAR1, address VAR2, uint256 VAR3, bytes VAR4) payable public {
VAR5[msg.sender] = VAR5[msg.sender].FUN2(msg.value);
uint256 VAR6 = VAR1.FUN3(this);
require(VAR2.call.value(VAR3)(VAR4));
VAR5[msg.sender] = VAR5[msg.sender].FUN4(VAR3);
VAR7[msg.sender][VAR1] = VAR7[msg.sender][VAR1].FUN2(VAR1.FUN3(this).FUN4(VAR6));
1
---------------------------------
11705.sol
FUN1(address VAR1, uint value) internal 
{require (VAR2[VAR1][msg.sender] >= value);
VAR2[VAR1][msg.sender] -= value;
VAR3[VAR1] -= value;require((VAR1 != 0)?
FUN2(VAR1).transfer(msg.sender, value):
msg.sender.call.value(value)()
);
emit FUN3
(VAR1,
msg.sender,
value,
VAR2[VAR1][msg.sender]);
FUN4(uint VAR4) public {F
UN1(0, VAR4);
FUN5(address VAR1, uint VAR4) public {
FUN1(VAR1, VAR4);
0
---------------------------------
13076.sol
FUN1(address VAR1, uint256 VAR2, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN2(VAR1, VAR2);
require(VAR1.call.value(msg.value)(VAR3));
return true;function FUN3(address VAR4, uint256 VAR2, bytes VAR3) public payable returns (bool) {require(VAR4 != address(this));
super.transfer(VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN4(    address VAR5,    address VAR4,    uint256 VAR2,    bytes VAR3  )    public payable returns (bool)  {
require(VAR4 != address(this));
super.FUN5(VAR5, VAR4, VAR2);
require(VAR4.call.value(msg.value)(VAR3));
return true;
function FUN6(address VAR1, uint VAR6, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN7(VAR1, VAR6);require(VAR1.call.value(msg.value)(VAR3));
return true;
function FUN8(address VAR1, uint VAR7, bytes VAR3) public payable returns (bool) {
require(VAR1 != address(this));
super.FUN9(VAR1, VAR7);
require(VAR1.call.value(msg.value)(VAR3));
return true;contract TimedCrowdsale is VAR8 {using SafeMath for uint256;uint256 public VAR9;uint256 public VAR10;
modifier VAR11 {require(VAR12.VAR13 >= VAR9 && VAR12.VAR13 <= VAR10);VAR14;
1
---------------------------------
22902.sol
FUN1(address VAR1, uint VAR2, bytes VAR3, string VAR4) public returns (bool VAR5) {
if (FUN2(VAR1)) {
require(VAR6[VAR1]);
if (FUN3(msg.sender) < VAR2) revert();
VAR7[msg.sender] = VAR7[msg.sender].FUN4(VAR2);
VAR7[VAR1] = VAR7[VAR1].FUN5(VAR2);
assert(VAR1.call.value(0)(bytes4(FUN6(VAR4)), msg.sender, VAR2, VAR3));
FUN7(msg.sender, VAR1, VAR2, VAR3);
return true;
} else {
return FUN8(VAR1, VAR2, VAR3);
0
---------------------------------
23166.sol
FUN1(address VAR1) payable public VAR2  {
require(!VAR3);
require(msg.value >= 0.01 VAR4);
uint256 VAR5 = msg.value.FUN2(35e4);
require(VAR5 > 0);
require(VAR6.FUN3(VAR5)<=VAR7 );
VAR8[VAR1] = VAR8[VAR1].FUN3(VAR5);
VAR9 = VAR9.FUN3(VAR5);
VAR6 = VAR6.FUN3(VAR5);VAR10 = VAR10.FUN3(msg.value);
if (!VAR11.call.value(msg.value)()) revert();
FUN4(msg.sender, VAR1, msg.value, VAR5);
FUN5(uint256 VAR12, address VAR13) public {VAR14 = msg.sender;VAR11 = VAR13;
VAR15 = VAR12;
VAR16 = VAR15 + 16 * 1 VAR17;
function() public payable {FUN1(msg.sender);
0
---------------------------------
30337.sol
FUN1()  external   returns (bool VAR1) {
uint256 VAR2 = VAR3[msg.sender];VAR3[msg.sender] = 0;
VAR4 -= VAR2;
if (!msg.sender.call.value(VAR2)()) {
throw;VAR1 = true;
0
---------------------------------
31565.sol
FUN1(address VAR1) onlyOwner public {
uint256 VAR2 = VAR3[VAR1];
require(VAR2 > 0);VAR3[VAR1] = 0;
FUN2(VAR1);require(VAR1.call.value(VAR2)());
FUN3(address[] VAR4) onlyOwner public {
for (uint256 VAR5 = 0; VAR5 < VAR4.VAR6; VAR5++) {
FUN1(VAR4[VAR5]);
0
---------------------------------
31759.sol
FUN1(uint8[] VAR1, bytes32[] VAR2, bytes32[] VAR3, address VAR4,  uint value, bytes VAR5)  external {
bytes32 VAR6 = FUN2(FUN3(0x19),  FUN3(0), this, VAR7++, VAR4, value, VAR5  );
FUN4( VAR1,VAR2,VAR3,VAR6);
require(VAR4.call.value(value)(VAR5));
0
---------------------------------
35649.sol
FUN1() public  payoutsAreActive   returns (bool)  {
uint VAR1 = VAR2[msg.sender];
VAR2[msg.sender] = 0;
if (msg.sender.call.value(VAR1)()) {
return true;
} else {
VAR2[msg.sender] = VAR1;
return false;
0
---------------------------------
35661.sol
FUN1() VAR1 {if(FUN2() != VAR2.VAR3) throw;
address VAR4 = msg.sender;
if(VAR5[VAR4] == 0) throw;
uint VAR6 = VAR5[VAR4];
delete VAR5[VAR4];
if(!(VAR4.call.value(VAR6)())) throw;
FUN3(VAR4, VAR6);
0
---------------------------------
35878.sol
FUN1(address VAR1, bytes32 VAR2, address VAR3)
FUN2(VAR1, VAR2, VAR3)
VAR4 = VAR5;
function() public payable {
FUN3(msg.sender, VAR4, msg.value);
require(VAR4.call.value(msg.value)(msg.VAR6));
FUN4(bytes32 VAR2, address VAR3)
FUN5 (address VAR7)
VAR7 = address(VAR8 FUN1(msg.sender, VAR2, VAR3));
FUN6(msg.sender, VAR2, VAR7);
0
---------------------------------
37329.sol
FUN1() VAR1 {
if (FUN2() < VAR2) return;
if (this.VAR3 == 0) return;
uint256 VAR4 = VAR5.FUN3(this.VAR3, VAR6);
assert(VAR7.call.value(VAR4)());
FUN4(VAR4);
0
---------------------------------
37891.sol
FUN1() {uint VAR1 = VAR2[msg.sender];
require(VAR1 > 0);
VAR2[msg.sender] = 0;
bool VAR3 = msg.sender.call.value(VAR1)();
require(VAR3);
0
---------------------------------
39890.sol
FUN1(uint VAR1) internal {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if (VAR4.VAR5 == VAR6.VAR7) throw;
VAR4.VAR5 = VAR6.VAR7;
if(!VAR4.VAR8.call.value(0)(VAR4.VAR9)) throw;
FUN2(VAR1, VAR4.VAR5);
function FUN3(uint VAR1) campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR11) ||(VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
function FUN4(uint VAR1) campaignNotCanceled VAR10 {
if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((msg.sender != VAR4.VAR13)&&(msg.sender != VAR14))  throw;
if ((VAR4.VAR5 != VAR6.VAR12) || (VAR15 < VAR4.VAR16 + VAR4.VAR17)) throw;
FUN1(VAR1);
function FUN5(uint VAR1) onlyArbitrator campaignNotCanceled VAR10 {if (VAR1 >= VAR2.VAR3) throw;
Milestone VAR4 = VAR2[VAR1];
if ((VAR4.VAR5 != VAR6.VAR18) && (VAR4.VAR5 != VAR6.VAR12)) throw;
FUN1(VAR1);
0
---------------------------------
39932.sol
FUN1(bytes32 VAR1) payable returns (bool) {
if (msg.value < 100) throw;
var VAR2 = msg.value * VAR3 / 100;var VAR4 = bytes4(FUN2(""));
if ( !VAR5.call.value(VAR2)(VAR4, VAR6)|| !VAR5.call.value(msg.value - VAR2)(VAR4, VAR1)) throw;
return true;contract Invoice is VAR7 {address   public VAR8;
uint      public VAR9;
Comission public VAR10;
string    public VAR11;
bytes32   public VAR12;
uint      public value;
0
---------------------------------
40416.sol
FUN1(uint VAR1) {
if (msg.value>0) throw;
if (VAR2[0][msg.sender] < VAR1) throw;
VAR2[0][msg.sender] -= VAR1;
if (!msg.sender.call.value(VAR1)()) throw;
FUN2(0, msg.sender, VAR1, VAR2[0][msg.sender]);
0
---------------------------------
40589.sol
FUN1(address VAR1, uint value) internal {
if (!VAR1.FUN2(value)) {
if (!VAR1.call.value(value)()) throw;
FUN3(address VAR2, uint VAR3) internal returns (bool) {
if (VAR3 == 0) throw;
if (this.VAR4 < VAR3 * VAR5 / VAR6) throw;
if (!VAR7.FUN4(VAR2, VAR8, VAR3)) return false;
FUN1(VAR2, VAR3 * VAR5 / VAR6);
FUN5(VAR2, VAR3);
return true;
0
---------------------------------
EtherStore.sol
FUN1 (uint256 VAR1) public {
require(VAR2[msg.sender] >= VAR1);
require(VAR1 <= VAR3);
require(VAR4 >= VAR5[msg.sender] + 1 VAR6);
require(msg.sender.call.value(VAR1)());
VAR2[msg.sender] -= VAR1;
VAR5[msg.sender] = VAR4;
1
---------------------------------
PrivateBank.sol
FUN1(uint VAR1)  {
if(VAR1<=VAR2[msg.sender]) {
if(msg.sender.call.value(VAR1)()) {
VAR2[msg.sender]-=VAR1;
VAR3.FUN2(msg.sender,VAR1,"");
function() public payable{
}contract Logstruct Messageaddress VAR4;
string  VAR5;uint VAR6;
uint  VAR7;
VAR8[] public VAR9;
Message VAR10;
1
---------------------------------